
public class ExtentManager {

	public static Logger log = LogFunction.getLogger(ExtentManager.class);
	private static ExtentHtmlReporter htmlReporter;
	private static ExtentReports extent;
	private static String testReport = "TestReport_" + DateTime.currentDateWithTime() + ".html";
	public static ExtentTest test;

	/**  Initializing and insert config.properties file with its value(s) at run time. */
		public static String propertiesFileData(String configFileData) {
			return ConfigurationDataSource.getProperties().getProperty(configFileData);
		}
		
		/**
		 * @param comment
		 */
		public static void logInfo(String comment) {
			log.info(comment);
			test.log(Status.INFO, comment);
		//	test.createNode("Details").log(Status.INFO, comment);
		}
		
	private static ExtentHtmlReporter getHtmlReporter() {
		htmlReporter = new ExtentHtmlReporter(propertiesFileData("htmlReportPath") + testReport);
		htmlReporter.config().setChartVisibilityOnOpen(true);
		htmlReporter.config().setTheme(Theme.STANDARD); // Theme background - dark,	standard
		htmlReporter.config().setReportName("Automation Test Report");
		htmlReporter.setAppendExisting(true);
		htmlReporter.config().setTestViewChartLocation(ChartLocation.TOP);  
		htmlReporter.config().setTimeStampFormat("MMM/dd/yyyy hh:mm:ss a"); // "_MMM-dd-yyyy_HH-mm-ss"
		htmlReporter.config().setEncoding("utf-8");
		htmlReporter.config().setDocumentTitle("Demo automation report");
		htmlReporter.loadXMLConfig(propertiesFileData("extentConfigXml"));
		return htmlReporter;
	}
	
	/**
	 * @return
	 */
	public static ExtentReports GetExtent(){
		if (extent != null) {
			return extent;
		}
			extent = new ExtentReports();
			//	Additional information that makes our report looks nice
				extent.setSystemInfo("Host Name", "Company System Information goes here");
				extent.setSystemInfo("Environment", "QA");
				extent.setSystemInfo("Version", "V-1.0.0");
				extent.setSystemInfo("OS", "Windows-10");
				extent.attachReporter(getHtmlReporter());
				return extent;
			}
	
	/**
	 * @return 
	 * 
	 */
	public static ExtentReports extentReportInitiator() {
		extent = ExtentManager.GetExtent();
		return extent;
	}
	
	/**
	 * @param method
	 */
	public static void getTestMethodsInformation(Method method) {
	//	test = extent.createTest(method.getName(), "is being executed").assignAuthor("Oludare M Eniola").createNode(method.getName() + " Test Result Status");
		test = extent.createTest(method.getName(), "is being executed").createNode(method.getName() + " Test Result Status");
		logInfo(method.getName() + " test is executing ... ");
	}
	
	/**
	 * 
	 */
	public static void flushTestReportToFile() {
	//	launchTestResult();
	}

	/**
	 * @param method
	 * @throws IOException
	 */
	public static void getTestResult(ITestResult method) throws IOException {
		if (ITestResult.SUCCESS == method.getStatus()) {
			test.log(Status.PASS, method.getName() + " test passed");
		} else if (ITestResult.SKIP == method.getStatus()) {
			test.log(Status.SKIP, method.getName() + " test is skipped and the reason is:- " + method.getThrowable());
		} else if (ITestResult.FAILURE == method.getStatus()) {
			test.log(Status.FAIL, method.getThrowable());
			test.fail((method.getName() + " test failed during execution"), 
					MediaEntityBuilder.createScreenCaptureFromPath(TestUtility.captureScreen(method.getName())).build());
		//	test.addScreenCaptureFromPath(TestUtility.captureScreen(method.getName()));
		}
		logInfo("...... " + method.getName() + " test execution completed.");
		extent.flush();
		}
		
/**
	 * @param comment
	 */
	public static void logInfo(String stepName, String details) {
		log.info(details);
		test.createNode(stepName).info(details);
	}

	/**
	 * @param comment
	 */
	public static void logError(String stepName, String details) {
		log.error(details);
		test.createNode(stepName).error(details);
	}
	
	/**
	 * @param comment
	 */
	public static void logFail(String stepName, String errorMessageDetail) {
		log.error(errorMessageDetail);
		markTestAsFail(stepName, errorMessageDetail);
		}

	/**
	 * @param details
	 */
	public static void logPass(String stepName, String details) {
		log.info(details);
		test.createNode(stepName).pass(details);
	}		
	
	}
