package testbase;

import java.io.File;
import java.io.IOException;
import java.lang.reflect.Method;
import java.util.concurrent.TimeUnit;
import org.apache.commons.io.FileUtils;
import org.apache.log4j.*;
import org.openqa.selenium.OutputType;
import org.openqa.selenium.TakesScreenshot;
import org.openqa.selenium.WebDriver;import org.openqa.selenium.ie.InternetExplorerDriver;
import org.openqa.selenium.remote.CapabilityType;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.testng.ITestResult;
import org.testng.Reporter;
import org.testng.annotations.AfterMethod;
import resources.ConfigurationDataSource;
import resources.ExtentManager;
import resources.LogHelper;
import resources.PropertyFileReader;
import resources.ReadDataFromExcelSheet;
import utilities.CommonFunctions;
import utilities.DateTime;
import utilities.ResourceHelper;
import com.aventstack.extentreports.ExtentReports;
import com.aventstack.extentreports.ExtentTest;
import com.aventstack.extentreports.Status;
import browserconfiguration.*;

public class Base {

 private static final Logger LOGGER = LoggerFactory.getLogger(TestUtility.class);

    private static WebDriver driver;
    static String testReport = "TestReport_" + currentDateWithTime() + ".html";
    private static ExtentTest test;

    private TestUtility() {    }

    /**
     * @param myDriver
     * @param result
     * @return
     */
    public static String captureScreen(String result) {
        if (result == "") {
            result = "blank";
        }
        File destFile = null;
        final File scrFile = ((TakesScreenshot) getDriver()).getScreenshotAs(OutputType.FILE);
        try {
            destFile = new File(propertiesFileData("screenShotPath") + result + "_"
                            + DateTimeHandler.currentDateWithTime() + ".png");
            Files.copy(scrFile, destFile);
            log("Web page screenshot captured");
            // Reporter.log("<a href='" + destFile.getAbsolutePath() + "'> <img src='" + destFile + "' height='80'
            // width='100'/> </a>");
        } catch (final IOException e) {
            log("Exception while taking screenshot" + e.getMessage());
        }
        return destFile.toString();
    }

    /**
     * @param workBookName
     * @param excelSheetName
     * @param testName
     * @return
     */
    public static Object[][] getAllDataInOneExcelSheet(final String workBookName, final String excelSheetName,
        final String testName) {
        final String excelLocation = propertiesFileData("testDataFilePath") + workBookName;
        return new SpreadSheetHandler(excelLocation, excelSheetName).getDataBasedOnFirstColumnWithStart(testName);
    }

    /**
     *
     */
    public static void getApplicationUrl(final String domainUrl) {
        if (driver != null) {
            driver.get(propertiesFileData(domainUrl));
            LOGGER.info("navigating to ..." + propertiesFileData(domainUrl));
        } else {
            throw new WebDriverException("WebDriver not initialized properly");
        }
    }

    /**
     * @param incominDriver
     */
    public static void getApplicationUrl(final WebDriver incomingDriver, final String domainUrl) {
        if (incomingDriver != null) {
            incomingDriver.get(propertiesFileData(domainUrl));
            LOGGER.info("navigating to ..." + propertiesFileData(domainUrl));
        } else {
            LOGGER.info("throwing new WebDriver:Excpetion");
            throw new WebDriverException("WebDriver not initialized properly");
        }
    }

    /**
     * @param browserType
     */
    public static WebDriver getBrowser(final BrowserType browserType) {
        driver = getWebDriver(browserType);
        LOGGER.info("Initialize Web driver: " + driver.hashCode());
        driver.manage().window().maximize();
        driver.manage().timeouts().pageLoadTimeout(new ConfigurationDataSource().getPageLoadTime(), TimeUnit.SECONDS);
        return driver;
    }

    /**
     * @param workBookName
     * @param excelSheetName
     * @param colName
     * @param rowNum
     * @return
     */
    public static Object getCellData(final String workBookName, final String excelSheetName, final String colName,
        final int rowNum) {
        final String excelLocation =
            ResourceHelper.getResourcePath(propertiesFileData("testDataFilePath")) + workBookName;
        return new SpreadSheetHandler(excelLocation, excelSheetName).getSpreadsheetCellData(colName, rowNum);
    }

    /**
     * @return
     */
    public static WebDriver getDriver() {
        return driver;
    }

    /**
     * ... Excel reader for data-driven ...
     *
     * @param workBookName
     * @param excelSheetName
     * @return
     */
    public static Object[][] getExcelData(final String workBookName, final String excelSheetName) {
        // String excelLocation = ResourceHelper.getResourcePath(propertiesFileData("testDataFilePath")) + workBookName;
        final String excelLocation = propertiesFileData("testDataFilePath") + workBookName;
        // return new ReadDataFromExcelSheet(excelLocation, excelSheetName).getDataFromSpreadSheet("UserName");
        return new SpreadSheetHandler(excelLocation, excelSheetName).getSpreadSheetData();
    }

    /**
     * ... Excel reader for data-driven ...
     *
     * @param workBookName
     * @param excelSheetName
     * @return
     */
    public static Object[][] getExcelData(final String workBookName, final String excelSheetName,
        final String firstRowAndFirstColumnName) {
        // String excelLocation = ResourceHelper.getResourcePath(propertiesFileData("testDataFilePath")) + workBookName;
        final String excelLocation = propertiesFileData("testDataFilePath") + workBookName;
        return new SpreadSheetHandler(excelLocation, excelSheetName).getSpreadSheetData(firstRowAndFirstColumnName);

    }

    /**
     * @param driver
     * @param uIPageName
     */
    public static void getPageNavigationScreenshot(final String uIPageName) {
        try {
            test.addScreenCaptureFromPath(TestUtility.captureScreen(uIPageName));
            // MediaEntityBuilder.createScreenCaptureFromPath(captureScreen(uIPageName)).build();
            log("capturing UI navigation screen of the current page... " + uIPageName);
        } catch (final Exception e) {
            log(e.getMessage());
        }
    }

 public static Object[][] getTestDataByMap(final String workBookName, final String excelSheetId,
        final boolean isSheetTypeIndex) {
        final String excelLocation = TestUtility.propertiesFileData("testDataFilePath") + workBookName;
        return new SpreadSheetHandler(excelLocation, excelSheetId, isSheetTypeIndex).getTestData();
    }

    /**
     * @param browserType
     */
    public static WebDriver getWebDriver(final BrowserType browserType) {
        if (driver == null) {
            switch (browserType) {
                case CHROME:
                    final ChromeBrowser chrome = new ChromeBrowser();
                    return chrome.getChromeDriver(chrome.getChromeOptions());

                case FIREFOX:
                    final FirefoxBrowser firefox = new FirefoxBrowser();
                    return firefox.getFirefoxDriver(firefox.getFirefoxOptions());

                case IE:
                    final IExplorerBrowser ie = new IExplorerBrowser();
                    return ie.getIExplorerDriver();

                case EDGE:
                    stopDriver();
                    final EdgeBrowser edge = new EdgeBrowser();
                    return edge.getEdgeDriver(edge.getEdgeOptions());

                default:
                    throw new UnsupportedOperationException(
                                    "Browser type: " + browserType.name() + " not yet supported for this application");
            }
        }
        return driver;
    }

    /**
     *
     */
    public static WebDriver initializeDriver() {
        return TestUtility.getBrowser(new ConfigurationDataSource().getBrowserType());
    }

    /**
     *
     */
    public static void launchTestResult() {
        log("Navigating to the test result/report page ...");
        // driver = getDriverOfType(new ConfigurationDataSource().getBrowserType());
        WaitFunctions.syncTimeInSeconds(2);
        driver.get(System.getProperty("user.dir") + propertiesFileData("htmlReportPath") + testReport);
        log("Test result/report page loaded!");
    }

    /**
     * @param comment
     */
    public static void log(final String comment) {
        LOGGER.info(comment);
        // Reporter.log(comment);
    }

    /**
     * @param stepName
     * @param errorMessage
     */
    public static ExtentTest markTestAsFail(final String stepName, final String errorMessageDetail) {
        MediaEntityModelProvider screenshot = null;
        try {
            screenshot = MediaEntityBuilder.createScreenCaptureFromPath(captureScreen(stepName)).build();
            // screenshot = ExtentManager.test.addScreenCaptureFromPath(TestUtility.captureScreen(method.getName()));
        } catch (final Exception e) {
            LOGGER.warn("Error creating screenshot");
            LOGGER.error(e.getMessage());
            ExtentReportHandler.test.createNode(stepName).error(e);
        }
        return ExtentReportHandler.test.createNode(stepName).fail(errorMessageDetail, screenshot);
    }

    /**
     * @param configFileData
     * @return
     */
    public static String propertiesFileData(final String configFileData) {
        return ConfigurationDataSource.getProperties().getProperty(configFileData);
    }

    /**
     *
     */
    public static void stopDriver() {
        if (driver != null) {
            driver.quit();
        }
        LOGGER.info("terminating all opened browsers!");
    }
}
	

