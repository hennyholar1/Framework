package testbase;

import java.io.File;
import java.io.IOException;
import java.lang.reflect.Method;
import java.util.concurrent.TimeUnit;
import org.apache.commons.io.FileUtils;
import org.apache.log4j.*;
import org.openqa.selenium.OutputType;
import org.openqa.selenium.TakesScreenshot;
import org.openqa.selenium.WebDriver;import org.openqa.selenium.ie.InternetExplorerDriver;
import org.openqa.selenium.remote.CapabilityType;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.testng.ITestResult;
import org.testng.Reporter;
import org.testng.annotations.AfterMethod;
import resources.ConfigurationDataSource;
import resources.ExtentManager;
import resources.LogHelper;
import resources.PropertyFileReader;
import resources.ReadDataFromExcelSheet;
import utilities.CommonFunctions;
import utilities.DateTime;
import utilities.ResourceHelper;
import com.aventstack.extentreports.ExtentReports;
import com.aventstack.extentreports.ExtentTest;
import com.aventstack.extentreports.Status;
import browserconfiguration.*;

public class Base {

	public static ExtentReports extent;
	public static ExtentTest test;
	public static WebDriver driver;
	public static File reportDirectery;
	static String testReport = "TestReport_" + DateTime.currentDateWithTime() + ".html";
	public static Logger log = LogHelper.getLogger(TestUtility.class);

	private TestUtility(){} 
	
	//@BeforeSuite(alwaysRun = true)
	public static void foreRunner() {
		extent = ExtentManager.GetExtent();
	}
	
	//@AfterSuite(alwaysRun = true)
	public static void flushTestReportToFile() throws Exception {
		extent.flush();
		launchTestResult();
	}
	
//	@BeforeTest
	public static void initializedAll() throws Exception {
		ObjectReader.reader = new ConfigurationDataSource();
		reportDirectery = new File(propertiesFileData("screenShotPath"));	
		launchApplication(ObjectReader.reader.getBrowserType());	
		CommonFunctions.setDriver(driver);
		CommonFunctions.setWait();
	}
	
	//@BeforeMethod
	public static void getMethodInformation(Method method) {
		test = extent.createTest(method.getName(), "is being executed").assignAuthor("Oludare_Eniola");
		test.log(Status.INFO, method.getName() + " test starts executing ");
		log(".... " + method.getName() + " test started ....");
	}

	//@AfterMethod()
	public static void testResult(ITestResult method) throws IOException {
		if (ITestResult.SUCCESS == method.getStatus()) {
	//		test.pass(method.getName() + " passed");
			test.log(Status.PASS, method.getName() + " test passed");
			log(" ...... " + method.getName() + " test passed executed successfully ......");
		} else if (ITestResult.SKIP == method.getStatus()) {
			test.log(Status.SKIP, method.getName() + " test is skipped and the reason is:- " + method.getThrowable());
		} else if (ITestResult.FAILURE == method.getStatus()) {
			test.log(Status.FAIL, method.getThrowable());
		//	MediaEntityBuilder.createScreenCaptureFromPath(imagePath).build();
		//	test.addScreenCaptureFromPath(captureScreen(driver, method.getName()));
			test.fail((method.getName() + " failed during execution"), 
					MediaEntityBuilder.createScreenCaptureFromPath(captureScreen(driver, method.getName())).build());
			log("...... " + method.getName() + " test failed during execution ....");
		}
			log("...... " + method.getName() + " has finished executing ......");
		//	extent.flush();
		}
	

// 	Inserting config.properties file with its value(s) at the run time.
	public static String propertiesFileData(String configFileData) {
		return ConfigurationDataSource.OR.getProperty(configFileData);
	}

	public static WebDriver getDriver(BrowserType browserType) throws Exception {
	if (driver == null)
		try{
			switch(browserType){
			case CHROME:
				ChromeBrowser chrome = new ChromeBrowser();
				return chrome.getChromeDriver(chrome.getChromeOptions());

			case FIREFOX:
				FirefoxBrowser firefox = new FirefoxBrowser();				
				return firefox.getFirefoxDriver(firefox.getFirefoxOptions());
				
				case IE:
					IExploreBrowser ie = new IExploreBrowser();
					return ie.getIExplorerDriver();
					
				case EDGE:
					EdgeBrowser edge = new EdgeBrowser();
					return edge.getEdgeDriver(edge.getEdgeOptions());	

				default:
					throw new Exception("Browser type: " + browserType.name() + " not yet supported for this application");
				}
			} catch (Exception e) {
				log.info(e.getMessage());
				throw e;
			}
return driver;
	}
	
	public static void launchApplication(BrowserType browserType) throws Exception {
		driver = getDriver(browserType);
	//	driver = getBrowserObject(browserType);
		getApplicationUrl();
		log.info("Initialize Web driver: "+driver.hashCode());
		driver.manage().timeouts().pageLoadTimeout(ObjectReader.reader.getPageLoadTime(), TimeUnit.SECONDS);
	}
	
	public static void getApplicationUrl(){
			if (driver != null) {
				driver.navigate().to(propertiesFileData("url"));
				log.info("navigating to ..."+propertiesFileData("url"));
	        }
	        else {
	            throw new WebDriverException("WebDriver not initialized properly");
	        }
	}

	public static String captureScreen(WebDriver driver, String result) {
		if (driver == null) {
			log("driver is null..");
			return null;
		}
		if (result == "") {
			result = "blank";
		}
		File destFile = null;
		File scrFile = ((TakesScreenshot) driver).getScreenshotAs(OutputType.FILE);
		try {
			destFile = new File(reportDirectery + "/pagescreenshots/" + result + "_" + DateTime.currentDateWithTime() + ".png");
		//	FileUtils.copyFile(scrFile, destFile);
			Files.copy(scrFile, destFile);
			log("Web page screenshot captured");
			Reporter.log("<a href='" + destFile.getAbsolutePath() + "'> <img src='" + destFile + "' height='100' width='100'/> </a>");
		} catch (IOException e) {
			System.out.println("Exception while taking screenshot" + e.getMessage());
		}
		return destFile.toString();
	}

	public static void getPageNavigationScreenshot(WebDriver driver, String uIPageName)  {
		String screen = captureScreen(driver, uIPageName);
		try {
			test.addScreenCaptureFromPath(screen);
		//	MediaEntityBuilder.createScreenCaptureFromPath(captureScreen(driver, uIPageName)).build();
			log("capturing UI navigation screen of the current page...");
		} catch (Exception e) {	
			e.printStackTrace();
		}
	}
	
	public static void stopDriver() {
        if (driver != null) {
            driver.quit();
        }
        log.info("terminating all browsers opened by the driver!");
    }
	
	public static void launchTestResult() throws Exception {
		log("Navigating to the test result/report page ...");
	//	driver = getDriver(ObjectReader.reader.getBrowserType());
		WaitFunctions.sleep(5);
		driver.navigate().to((System.getProperty("user.dir") + propertiesFileData("htmlReportPath") + testReport));
		log("Test result/report page loaded!");
	}

	public static void log(String comment) {
		log.info(comment);
		Reporter.log(comment);
	 	test.log(Status.INFO, comment);
	}

	/** ... Excel reader for data-driven ... */
	public static String[][] getExcelData(String workBookName, String excelSheetName) {
		String excelLocation = ResourceHelper.getResourcePath(propertiesFileData("testDataFilePath")) + workBookName;
		return ReadDataFromExcelSheet.getDataFromSpreadSheet(excelLocation, excelSheetName);
	}

	public static Object[][] getAllDataInOneExcelSheet(String workBookName, String excelSheetName, String testName) {
		String excelLocation = ResourceHelper.getResourcePath(propertiesFileData("testDataFilePath")) + workBookName;
		return ReadDataFromExcelSheet.getDataFromSpreadSheetBasedOnStartingPoint(excelLocation, excelSheetName,
				testName);
	}
}
