Package packageName.

import java.time.Duration;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Set;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.apache.log4j.Logger;
import org.frb.stls.cars.common.functions.MouseFunctions;
import static org.frb.stls.cars.common.utilities.ExtentManager.*;
import static org.frb.stls.cars.common.webdrivers.TestUtility.markTestAsFail;
import org.frb.stls.cars.common.utilities.LogFunction;
import org.openqa.selenium.By;
import org.openqa.selenium.NoSuchElementException;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.ui.FluentWait;
import org.openqa.selenium.support.ui.Wait;

/**
 * @author Oludare
 *
 */
public class CommonFunctions {

	private final static Logger log = LogFunction.getLogger(CommonFunctions.class);
	public static WebDriver myDriver;
	public static Wait<WebDriver> wait;

	public static void initialize(WebDriver driver) {
		myDriver = driver;
		wait = new FluentWait<>(myDriver).withTimeout(Duration.ofSeconds(10)).pollingEvery(Duration.ofSeconds(1))
				.ignoring(NoSuchElementException.class);
	}

	/**
	 * @param uiPageObject
	 * @return
	 */
	public static WebElement waitForElement(WebElement uiPageObject) {
		return wait.until(ExpectedConditions.visibilityOf(uiPageObject));
	}

	/**
	 * @param uiPageObject
	 * @param htmlAttributeValue
	 * @return
	 */
	public static String getPageObjectAttributeValue(WebElement uiPageObject, String htmlAttributeType) {
		if (!verifyElementIsPresent(uiPageObject))
			return null;
		return uiPageObject.getAttribute(htmlAttributeType);
	}
	
	/**
	 * @param uiPageObject
	 * @return
	 */
	public String getPageObjectAttributeValue(WebElement uiPageObject, String htmlAttributeType, String stepName, String testStepDetails) {
		try {
			if (uiPageObject.getAttribute(htmlAttributeType) != null) {
			logPass(stepName, testStepDetails);
			}
		} catch (Exception e) {
			logFail(stepName, "Unable to get the specified page object attribute type:  => " + e.getMessage());
		}
		return uiPageObject.getAttribute(htmlAttributeType);
	}

	/**
	 * @param uiPageObject
	 * @return
	 */
	public static String getDisplayText(WebElement uiPageObject) {
		waitForElement(uiPageObject);
		return getWebElement(uiPageObject).getText();
	}
	
	/**
	 * @param uiPageObject
	 * @return
	 */
	public static String getDisplayText(WebElement uiPageObject, String stepName, String testStepDetails) {
		try {
			waitForElement(uiPageObject);
			logPass(stepName, testStepDetails);
		} catch (Exception e) {
			logFail(stepName, "Unable to verify the page object displayed text on the web page:  => " + e.getMessage());
		}
		return uiPageObject.getText();
	}

//////////////////////////////////////////////////// Start here on Monday.
	/**
	 * @param uiPageObject
	 * @return
	 */
	public static boolean verifyElementIsNotPresent(WebElement uiPageObject) {
		try {
			getWebElement(uiPageObject).isDisplayed();
			return false;
		} catch (Exception e) {
			return true;
		}
	}

	/**
	 * @param uiPageObject
	 * @return
	 */
	public static boolean verifyElementIsPresent(WebElement uiPageObject) {
		return getWebElement(uiPageObject).isDisplayed();
	}

	/**
	 * @param uiPageObject
	 * @return
	 */
	public static boolean verifyElementIsEnabled(WebElement uiPageObject) {
		try {
			getWebElement(uiPageObject).isEnabled();
			return true;
		} catch (Exception e) {
			return false;
		}
	}

	/**
	 * @param uiPageObject
	 * @return
	 */
	public static boolean verifyElementIsDisabled(WebElement uiPageObject) {
		try {
			getWebElement(uiPageObject).isEnabled();
			return false;
		} catch (Exception e) {
			return true;
		}
	}

	/**
	 * @param uiPageObject
	 * @return
	 */
	public static boolean verifyElementIsSelected(WebElement uiPageObject) {
		try {
			getWebElement(uiPageObject).isSelected();
			return true;
		} catch (Exception e) {
			return false;
		}
	}

	/**
	 * @param uiPageObject
	 * @return
	 */
	public static boolean verifyElementIsNotSelected(WebElement uiPageObject) {
		try {
			getWebElement(uiPageObject).isSelected();
			return false;
		} catch (Exception e) {
			return true;
		}
	}

	
	///  MS Note contain the new method body with reporting stuff.
	/**
	 * @param uiPageObject
	 * @param expectedText
	 * @return
	 */
	public static boolean compareTextValue(WebElement uiPageObject, String expectedText) {
		try {
			if (getDisplayText(uiPageObject).equals(expectedText)) {
				return true;
			} else {
				return false;
			}
		} catch (Exception ex) {
			return false;
		}
	}

	/**
	 * @param uiPageObject
	 * @return
	 */
	public static WebElement getWebElement(WebElement uiPageObject) {
		waitForElement(uiPageObject);
		new JavaScriptFunctions(myDriver).highlightElement(uiPageObject);
		return waitForElement(uiPageObject);
	}

	/**
	 * @param uiText
	 * @return
	 */
	public static WebElement getWebElement(String uiText) {
		WebElement uiPageObject = waitForElement(myDriver.findElement(By.xpath("//*[contains(text(),'" + uiText + "')]")));
		new JavaScriptFunctions(myDriver).highlightElement(uiPageObject);
	//	wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//*[contains(text(),'" + uiText + "')]")));
		return uiPageObject;
	}

	/**
	 * * This method will enable user set wait time polling time for an element,
	 * and ensure element is visible before any action could be performed on it.
	 * 
	 * @param uiPageObject
	 * @param waitTime
	 * @param pollingEveryInMiliSec
	 * @return
	 */
	public static WebElement getWebElement(WebElement uiPageObject, int waitTime, int pollingEveryInMiliSec) {
		return new WaitFunctions(myDriver).getfluentWait(waitTime, pollingEveryInMiliSec)
				.until(ExpectedConditions.visibilityOf(uiPageObject));
	}

	/**
	 * This method will enable user to enter any DATA TYPE as an input value for
	 * a text box or text area on a web page , and the input value is converted
	 * to String data type.
	 * 
	 * @param uiPageObject
	 * @param value
	 */
	public static void setValue(WebElement uiPageObject, Object value) {
		getWebElement(uiPageObject).clear();
		uiPageObject.sendKeys(String.valueOf(value));
		new MouseFunctions(myDriver).tabKey();
	//	uiPageObject.sendKeys(Keys.TAB);
	}

	/**
	 * This method will enable user to enter any DATA TYPE as an input value for
	 * a text box or text area on a web page , and the input value is converted
	 * to String data type.
	 * 
	 * @param uiTextboxName
	 * @param value
	 */
	public static void setValue(String uiTextboxId, Object value) {
		try {
			WebElement element = wait.until(ExpectedConditions.presenceOfElementLocated(By.id(uiTextboxId)));
			element.clear();
			element.sendKeys(String.valueOf(value));
			new MouseFunctions(myDriver).tabKey();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	/**
	 * This method will enable user to enter any DATA TYPE as an input value for
	 * a text box or text area on a web page , and the input value is converted
	 * to String data type. It will also allow user to enter step name and step
	 * details for the reporting purpose.
	 * 
	 * @param uiPageObject
	 * @param inputValue
	 */
	public static void setValue(WebElement uiPageObject, Object inputValue, String stepName, String stepDetails) {
		try {
			getWebElement(uiPageObject).clear();
			uiPageObject.sendKeys(String.valueOf(inputValue));
			new MouseFunctions(myDriver).tabKey();
			logInfo(stepName, stepDetails);
		} catch (Exception e) {
			logFail(stepName, "Unable to enter data in the input field:  => " + e.getMessage());
		}
	}

	/**
	 * This method will enable user to enter any DATA TYPE as an input value for
	 * a text box or text area on a web page , and the input value is converted
	 * to String data type. It will also allow user to enter step name and step
	 * details for the reporting purpose.
	 * 
	 * @param uiTextboxName
	 * @param inputValue
	 */
	public static void setValue(String uiTextboxId, Object inputValue, String stepName, String stepDetails) {
		try {
			WebElement element = wait.until(ExpectedConditions.presenceOfElementLocated(By.id(uiTextboxId)));
			element.clear();
			element.sendKeys(String.valueOf(inputValue));
			new MouseFunctions(myDriver).tabKey();
			logInfo(stepName, stepDetails);
		} catch (Exception e) {
			logFail(stepName, "Unable to enter data in the input field:  => " + e.getMessage());
		}
	}

	/**
	 * @param uiPageObject
	 */
	public static void clickOnWebElement(WebElement uiPageObject) {
		try {
			getWebElement(uiPageObject).click();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	/**
	 * @param uiText
	 */
	public static void clickOnWebElement(String uiText) {
		try {
			getWebElement(uiText).click();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	/**
	 * @param uiText
	 */
	public static void clickOnWebElement(String uiText, String stepName, String stepDetails) {
		try {
			getWebElement(uiText).click();
			logPass(stepName, stepDetails);
		} catch (Exception e) {
			logError(stepName, "Unable to click on web element \"" + uiText + "\":  => " + e.getMessage());
		}
	}

	/**
	 * @param uiPageObject
	 */
	public static void clickOnWebElement(WebElement uiPageObject, String stepName, String stepDetails) {
		try {
			getWebElement(uiPageObject).click();
			logPass(stepName, stepDetails);
		} catch (Exception e) {
			logError(stepName, "Unable to click on web element \"" + uiPageObject.getText() + "\":  => " + e.getMessage());
		}
	}

	public static void selectDropdownValue(String dropDownElementToBeSelected) {
		WebElement uiPageObject = waitForElement(myDriver.findElement(By.xpath("//*[contains(text(),'" + dropDownElementToBeSelected + "')]")));
		waitForElement(uiPageObject).click();
	//	clickOnWebElement(dropDownElementToBeSelected)
	}

	/**
	 * @return
	 */
	public static Set<String> getWindowHandles() {
		return myDriver.getWindowHandles();
	}

	/**
	 * @param index
	 */
	public static void switchToWindow(int index) {
		try {
			LinkedList<String> windowsId = new LinkedList<>(getWindowHandles());
			if (index < 0 || index > windowsId.size())
				throw new IllegalArgumentException("Invalid Index : " + index);
			myDriver.switchTo().window(windowsId.get(index));
			logPass("Switch To Window", "Switching to window: " + index);
		} catch (Exception e) {
			logError("Switch To Window", "Unable to switch to window: " + index + ", " + e.getMessage());
		}
	}

	/**
	 * 
	 */
	public static void switchToParentWindow() {
		try {
			myDriver.switchTo().defaultContent();
			/** same as the above code */
			/*
			 * LinkedList<String> windowsId = new
			 * LinkedList<String>(getWindowHandles());
			 * driver.switchTo().window(windowsId.get(0));
			 */
			logPass("Switch To Window", "Switching to default/parent window");
		} catch (Exception e) {
			logError("Switch To Window", "Unable to switch to parent/default window: " + e.getMessage());
		}
	}

	/**
	 * 
	 */
	public static void switchToParentAndCloseChildWindow() {
		try {
			LinkedList<String> windowsId = new LinkedList<>(getWindowHandles());
			for (int i = 1; i < windowsId.size(); i++) {
				myDriver.switchTo().window(windowsId.get(i));
				myDriver.close();
				switchToParentWindow();
			}
			logPass("Switch To Window", "Switching to default/parent window");
		} catch (Exception e) {
			logError("Switch To Window", "Unable to switch to parent/default window: " + e.getMessage());
		}
	}

	/**
	 * @param locator
	 */
	public static void switchToFrame(By locator) {
		myDriver.switchTo().frame(myDriver.findElement(locator));
	}

	/**
	 * @param locator
	 */
	public static void switchToFrame(WebElement locator) {
		myDriver.switchTo().frame(waitForElement(locator));
	}

	/**
	 * @param nameOrId
	 */
	public static void switchToFrame(String nameOrId) {
		myDriver.switchTo().frame(nameOrId);
	}

	/**
	 * @param index
	 */
	public static void switchToFrame(int index) {
		myDriver.switchTo().frame(index);
	}

	/**
	 * @param indexOfTab
	 */
	public static void switchToTab(int indexOfTab) {
		ArrayList<String> tabs = new ArrayList<>(myDriver.getWindowHandles());
		myDriver.switchTo().window(tabs.get(indexOfTab));
	}

	/**
	 * 
	 */
	public static void switchToDefaultContent() {
		myDriver.switchTo().defaultContent();
	}

	/** .......................... Logs....................... */

	/**
	 * @param comment
	 */
	public static void logInfo(String stepName, String details) {
		log.info(details);
		test.createNode(stepName).info(details);
	}

	/**
	 * @param comment
	 */
	public static void logError(String stepName, String details) {
		log.error(details);
		test.createNode(stepName).error(details);
	}

	/**
	 * @param comment
	 */
	public static void logFail(String stepName, String errorMessageDetail) {
		log.error(errorMessageDetail);
		markTestAsFail(stepName, errorMessageDetail);
	}

	/**
	 * @param details
	 */
	public static void logPass(String stepName, String details) {
		log.info(details);
		test.createNode(stepName).pass(details);
	}
}
