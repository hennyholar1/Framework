package utilities;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.apache.log4j.Logger;
import org.openqa.selenium.By;
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.ui.FluentWait;
import org.openqa.selenium.support.ui.Wait;
import org.openqa.selenium.support.ui.WebDriverWait;
import resources.LogHelper;


public class CommonFunctions {
	

	private final static Logger log = LogHelper.getLogger(CommonFunctions.class);
	protected static WebDriver driver = null;
    protected static Wait<WebDriver> myWait;

	
	public static void setDriver(WebDriver driver){
		CommonFunctions.driver = driver;
	}
	
	public static Wait<WebDriver> setWait(){
		myWait = new FluentWait<>(CommonFunctions.driver);
		 return myWait;
	}
	// ------------------------------------------------------------------------------------------------------------
	public static boolean verifyElementPresent (WebElement uiElement) {
		try
			{
			log.info("verifying if " + uiElement.getText() + " is displayed");
			return getWebElement(uiElement).isDisplayed();
		}
		catch(Exception ex) {
			ex.printStackTrace();
		}
		return false;
	}

	public static boolean verifyElementNotPresent (WebElement uiElement) {
		try 
			{
			log.info("verifying if " + uiElement.getText() + " is not present");
			return getWebElement(uiElement).isDisplayed();
			}
		catch(Exception ex) {
			ex.printStackTrace();
			}
		return true;
	}
	
	public static synchronized String getElementAttributeValue(WebElement uiElement, String htmlAttributeValue) {
		if (null == uiElement)
			return null;
		if (!isDisplayed(uiElement))
			return null;
		log.info("Getting attritube of " + uiElement.getText() + " object");
		return uiElement.getAttribute(htmlAttributeValue);
	}

	public static boolean isDisplayed(WebElement uiElement) {
		try {
			getWebElement(uiElement).isDisplayed();
			log.info("verifying if " + uiElement.getText() + "  is displayed");
			return true;
		} catch (Exception e) {
			e.printStackTrace();
			return false;
		}
	}

	public static boolean isNotDisplayed(WebElement uiElement) {
		try {
			getWebElement(uiElement).isDisplayed();
			log.info("verifying if " + uiElement.getText() + "  is not displayed");
			return false;
			} catch (Exception e) {
			return true;
		}
	}

	public static boolean isEnabled(WebElement uiElement) {
		try {
			getWebElement(uiElement).isEnabled();
			log.info("verifying if " + uiElement.getText() + "  is enabled");
			return true;
		} catch (Exception e) {
			return false;
		}
	}

	public static boolean isDisabled(WebElement uiElement) {
		try {
			getWebElement(uiElement).isEnabled();
			log.info("verifying if " + uiElement.getText() + "  is not enabled");
			return false;	 
		} catch (Exception e) {
			return true;
		}
	}

	public static  boolean isSelected(WebElement uiElement) {
		try {
			getWebElement(uiElement).isSelected();
			log.info("verifying if " + uiElement.getText() + "  is selected");
			return true;
		} catch (Exception e) {
			return false;
		}
	}

	public static boolean isNotSelected(WebElement uiElement) {
		try {
			getWebElement(uiElement).isSelected();
			log.info("verifying if " + uiElement.getText() + "  is not selected");
			return false;
		} catch (Exception e) {
			return true;
		}
	}

	public static String getDisplayText(WebElement uiElement) {
		if (!isDisplayed(uiElement))
			return null;
		else
			log.info("Getting the displayed text value of " + uiElement.getText());
			return getWebElement(uiElement).getText();
	}

	public static void hiddenElementsPicker(String arg1) {
		List<WebElement> elements = driver.findElements(By.xpath("//*[contains(text(),'" + arg1 + "')]"));
		for (WebElement element : elements) {
			int x = element.getLocation().getX();
			if (x != 0) {
				element.click();
				log.info("clicking on an hidden element");
				break;
			}
		}
	}

	public static void hiddenElementHasValue(WebElement elementToClick, String elementToVerify) {
		clickOnWebElement(elementToClick);
		List<WebElement> elements = driver.findElements(By.xpath("//*[contains(text(),'" + elementToVerify + "')]"));
		for (WebElement element : elements) {
			int x = element.getLocation().getX();
			if (x != 0) {
				element.isDisplayed();
				log.info("Verifying the value of an hidden element " + elementToClick.getText());
				break;
			}
		}
	}

	public static boolean compareTextValue(WebElement uiElement, String expectedText) {

		boolean flag = false;
		try {
			String actualText = getDisplayText(uiElement);
			if (actualText.equals(expectedText)) {
				log.info("Comparing two string text values");
				return !flag;
			} else {
				return flag;
			}
		} catch (Exception ex) {
			return flag;
		}
	}

	// ------------------------------------------------------------------------------------------------------------
	/**	 * This method will make sure elementToBeClickable	 */
	public static void WaitForElementAndClick(WebElement uiElement, long waitTime) {
		new WebDriverWait(driver, waitTime).until(ExpectedConditions.elementToBeClickable(uiElement)).click();
	//	myWait.until(ExpectedConditions.elementToBeClickable(uiElement)).click();
	}

	/**	 * This method ensures waiting for the invisibilityOf an element	 */
	public static boolean waitForElementNotPresent(WebElement uiElement, long waitTime) {
		return new WebDriverWait(driver, waitTime).until(ExpectedConditions.invisibilityOf(uiElement));
	}

	/** * This method will wait for frame to be available and switch to it	 */
	public static void waitForframeAndSwitchToIt(WebElement uiElement, long waitTime) {
		myWait.until(ExpectedConditions.frameToBeAvailableAndSwitchToIt(uiElement));
	}


	/**	 * This method will make sure element is visible ...	 */
	public static WebElement getWebElement(WebElement uiElement, int waitTime, int pollingEveryInMiliSec) {
		return new WaitHelper(driver).getfluentWait(waitTime, pollingEveryInMiliSec).until(ExpectedConditions.visibilityOf(uiElement));
	}
	
	public static WebElement getWebElement(WebElement uiElement) {
		log.info("Getting element " + uiElement.getText() + " while driver waits");
		return myWait.until(ExpectedConditions.visibilityOf(uiElement));
	}
		
	
	public static void clickOnWebElement(WebElement uiElement) {	
		log.info("Clicking on element " + uiElement.getText());
		myWait.until(ExpectedConditions.elementToBeClickable(uiElement)).click();
		//	new WaitHelper(driver).getWait(10, 1).until(ExpectedConditions.visibilityOf(uiElement )).click();
	}
	
	public static void clickOnWebElement(WebElement uiElement, int waitTime) {
			new WaitHelper(driver).getWait(waitTime, 1).until(ExpectedConditions.elementToBeClickable(uiElement));
	}
	
	public static void clickOnWebElement(WebElement uiElement, int waitTime, int pollingTime) {
			new WaitHelper(driver).getWait(waitTime, pollingTime).until(ExpectedConditions.elementToBeClickable(uiElement)).click();
	}
	
	public static WebElement getWebElement(String uiText) {	
	//	return new WebDriverWait(driver, 10).until(ExpectedConditions.presenceOfElementLocated((By.xpath("//*[contains(text(),'" + uiText + "')]"))));
		return myWait.until(ExpectedConditions.presenceOfElementLocated((By.xpath("//*[contains(text(),'" + uiText + "')]"))));
	//	return new WebDriverWait(driver, 10).until(ExpectedConditions.presenceOfElementLocated((By.xpath("//*[contains(text(),'" + uiText + "')]"))));
	//	return driver.findElement(By.xpath("//*[contains(text(),'" + uiText + "')]"));	
	}
	
	public static void clickOnWebElement(String uiText) {
	//	driver.findElement(By.xpath("//*[contains(text(),'" + uiText + "')]")).click(); 
		getWebElement(uiText).click();
	}

	public static void setValue(WebElement uiElement, String value) {
		getWebElement(uiElement).clear();
		getWebElement(uiElement).sendKeys(value);
		getWebElement(uiElement).sendKeys(Keys.TAB);
	/*	uiElement.clear();
		uiElement.sendKeys(value);
		uiElement.sendKeys(Keys.TAB);	*/
	}

	public static void setValue(String uiTextboxName, String value) {
		driver.findElement(By.xpath("//*[contains(text(),'" + uiTextboxName + "')]")).clear();
		driver.findElement(By.xpath("//*[contains(text(),'" + uiTextboxName + "')]")).sendKeys(value);
		driver.findElement(By.xpath("//*[contains(text(),'" + uiTextboxName + "')]")).sendKeys(Keys.TAB);
	}

	// ------------------------------------------------------------------------------------------------------------
	/**	.... Under review
	public void clickOnExpandableMenu(String uiElement) {
		driver.findElement(By.xpath("//*[contains(text(),'" + uiElement + "') 
		and @aria-expanded='false')]"))).click();	OR		
	/*	myWait.until(ExpectedConditions.visibilityOf(driver
				.findElement(By.xpath("//*[contains(text(),'"+
					uiElement + "') and @aria-expanded='false')]")))).click();	
		getWebElement(driver.findElement(By.xpath("//*[contains(text(),'"+
				uiElement + "') and @aria-expanded='false')]"))).click();	
	}	

	public void clickOnExpandedMenu(String expandedMenu, String uiElement) {
	/* 	driver.findElement(By.xpath("//*[contains(text(),'" + expandedMenu +	// "')"
		 + " and @aria-expanded='true']/following-sibling::ul/child::li/child::a[contains(text),'"
		 + uiElement + "')]"))).click();	OR	
	/*	myWait.until(ExpectedConditions.visibilityOf(driver.findElement(By.xpath("//*[contains(text(),'" + expandedMenu
				+ "')" + " and @aria-expanded='true']/following-sibling::ul/child::li/child::a[contains(text),'"
				+ uiElement + "')]")))).click();	
		
	/*	myWait.waitForElement(driver.findElement(By.xpath("//*[contains(text(),'" + expandedMenu
				+ "')" + " and @aria-expanded='true']/following-sibling::ul/child::li/child::a[contains(text),'"
				+ uiElement + "')]"))).click();		
	}														*/

	// ------------------------------------------------------------------------------------------------------------
	public static Set<String> getWindowHandles() {
		return driver.getWindowHandles();
	}

	public static void SwitchToWindow(int index) {
		LinkedList<String> windowsId = new LinkedList<String>(getWindowHandles());
		if (index < 0 || index > windowsId.size())
			throw new IllegalArgumentException("Invalid Index : " + index);
		driver.switchTo().window(windowsId.get(index));
	}

	public static void switchToParentWindow() {
		driver.switchTo().defaultContent(); 
		/** same as the above code	*/
		/* LinkedList<String> windowsId = new LinkedList<String>(getWindowHandles());
		driver.switchTo().window(windowsId.get(0));	*/
	}

	public static void switchToParentAndCloseChildWindow() {
		LinkedList<String> windowsId = new LinkedList<String>(getWindowHandles());
		for (int i = 1; i < windowsId.size(); i++) {
			driver.switchTo().window(windowsId.get(i));
			driver.close();
		}
		switchToParentWindow();
	}

	// ------------------------------------------------------------------------------------------------------------
	public static void switchToFrame(By locator) {
		driver.switchTo().frame(driver.findElement(locator));
	}

	public static void switchToFrame(String nameOrId) {
		driver.switchTo().frame(nameOrId);
	}

	public static void switchToFrame(int index) {
		driver.switchTo().frame(index);
	}

	public static void switchToTab(int indexOfTab) {
		ArrayList<String> tabs = new ArrayList<String>(driver.getWindowHandles());
		driver.switchTo().window(tabs.get(indexOfTab));
	}

	public static void switchToDefaultContent() {
		driver.switchTo().defaultContent();
	}
}
