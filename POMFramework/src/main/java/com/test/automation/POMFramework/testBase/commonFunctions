package utilities;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.apache.log4j.Logger;
import org.openqa.selenium.By;
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.ui.FluentWait;
import org.openqa.selenium.support.ui.Wait;
import org.openqa.selenium.support.ui.WebDriverWait;
import resources.LogHelper;


public class CommonFunctions { 
	
	private final static Logger log = LogFunction.getLogger(CommonFunctions.class);
	public static Wait<WebDriver> wait;
	static ExtentTest stepLevelPass;
	static ExtentTest stepLevelFail;
	static ExtentTest stepLevelInfo;

	public CommonFunctions(WebDriver driver) {
		TestUtility.driver = driver;
		PageFactory.initElements(driver, this);
		wait = new FluentWait<>(TestUtility.driver).withTimeout(Duration.ofSeconds(10))
				.pollingEvery(Duration.ofSeconds(1)).ignoring(NoSuchElementException.class);
	}
	
	/**
	 * @param pageObject
	 * @return
	 */
	public static WebElement waitForElementBeforeClick(WebElement pageObject) {
		return wait.until(ExpectedConditions.elementToBeClickable(pageObject));
	}
	
	/**
	 * @param pageObject
	 * @return
	 */
	public static WebElement waitForElement(WebElement pageObject) {
		return wait.until(ExpectedConditions.visibilityOf(pageObject));
	}
	
	/**
	 * @param pageObject
	 * @return
	 */
	public static WebElement waitForPresenceOfElement(By locatorType) {
		return wait.until(ExpectedConditions.presenceOfElementLocated((locatorType)));
	}

	/**
	 * @param uiElement
	 * @param htmlAttributeValue
	 * @return
	 */
	public static String getElementAttributeValue(WebElement uiElement, String htmlAttributeValue) {
		if (!verifyElementIsPresent(uiElement))
			return null;
		logInfo("Verify if UI element " + uiElement.getText() + " object");
		return uiElement.getAttribute(htmlAttributeValue);
	}

	/**
	 * @param uiElement
	 * @return
	 */
	public static String getDisplayText(WebElement uiElement) {
		waitForElement(uiElement);
		logInfo("Get the displayed text value of " + uiElement.getText());
		return getWebElement(uiElement).getText();
	}

	/**
	 * @param uiElement
	 * @return
	 */
	public static boolean verifyElementIsNotPresent(WebElement uiElement) {
		try {
			getWebElement(uiElement).isDisplayed();
			logInfo("Verify if UI element " + uiElement.getText() + " is not displayed");
			return false;
		} catch (Exception e) {
			log.error(e.getMessage());
			return true;
		}
	}

	/**
	 * @param uiElement
	 * @return
	 */
	public static boolean verifyElementIsPresent(WebElement uiElement) {
		try {
			getWebElement(uiElement).isDisplayed();
			logInfo("Verify if UI element " + uiElement.getText() + " is displayed");
			return true;
		} catch (Exception e) {
			log.error(e.getMessage());
			return false;
		}
	}

	/**
	 * @param uiElement
	 * @return
	 */
	public static boolean verifyElementIsEnabled(WebElement uiElement) {
		try {
			getWebElement(uiElement).isEnabled();
			logInfo("Verify if UI element " + uiElement.getText() + " is enabled");
			return true;
		} catch (Exception e) {
			log.error(e.getMessage());
			return false;
		}
	}

	/**
	 * @param uiElement
	 * @return
	 */
	public static boolean verifyElementIsDisabled(WebElement uiElement) {
		try {
			getWebElement(uiElement).isEnabled();
			logInfo("Verify if UI element " + uiElement.getText() + " is not enabled");
			return false;
		} catch (Exception e) {
			log.error(e.getMessage());
			return true;
		}
	}

	/**
	 * @param uiElement
	 * @return
	 */
	public static boolean verifyElementIsSelected(WebElement uiElement) {
		try {
			getWebElement(uiElement).isSelected();
			logInfo("Verify if UI element " + uiElement.getText() + " is selected");
			return true;
		} catch (Exception e) {
			log.error(e.getMessage());
			return false;
		}
	}

	/**
	 * @param uiElement
	 * @return
	 */
	public static boolean verifyElementIsNotSelected(WebElement uiElement) {
		try {
			getWebElement(uiElement).isSelected();
			logInfo("Verify if UI element " + uiElement.getText() + " is not selected");
			return false;
		} catch (Exception e) {
			log.error(e.getMessage());
			return true;
		}
	}

	/**
	 * @param uiElement
	 * @param expectedText
	 * @return
	 */
	public static boolean compareTextValue(WebElement uiElement, String expectedText) {
		try {
			if (getDisplayText(uiElement).equals(expectedText)) {
				logInfo("Compare two string text values: " + getDisplayText(uiElement) + " and " + expectedText);
				return true;
			} else {
				logInfo("The two text values: " + getDisplayText(uiElement) + " and " + expectedText + " are not the same");
				return false;
			}
		} catch (Exception ex) {
			log.error(ex.getMessage());
			return false;
		}
	}

	/**
	 * @param uiElement
	 * @return
	 */
	public static WebElement getWebElement(WebElement uiElement) {
		waitForElementBeforeClick(uiElement);
		((JavascriptExecutor) TestUtility.driver).executeScript(
				"arguments[0].setAttribute('style', 'background: lava; border: 3px solid red;');", uiElement);
		WaitFunctions.sleep(0.15);
		((JavascriptExecutor) TestUtility.driver).executeScript("arguments[0].setAttribute('style', arguments[1]);",
				uiElement, "");
		return waitForElement(uiElement);
	}

	/**
	 * @param uiText
	 * @return
	 */
	public static WebElement getWebElement(String uiText) {
		return waitForPresenceOfElement(By.xpath("//*[contains(text(),'" + uiText + "')]"));
	}

	/**
	 * * This method will make sure element is visible ...
	 * 
	 * @param uiElement
	 * @param waitTime
	 * @param pollingEveryInMiliSec
	 * @return
	 */
	public static WebElement getWebElement(WebElement uiElement, int waitTime, int pollingEveryInMiliSec) {
		return new WaitFunctions(TestUtility.driver).getfluentWait(waitTime, pollingEveryInMiliSec)
				.until(ExpectedConditions.visibilityOf(uiElement));
	}

	/**
	 * @param uiElement
	 */
	public static void clickOnWebElement(WebElement uiElement) {
		try{
			waitForElementBeforeClick(uiElement);
			((JavascriptExecutor)TestUtility.driver).executeScript("arguments[0].setAttribute('style', 'background: lava; border: 3px solid red;');", uiElement);
			WaitFunctions.sleep(0.15);
			((JavascriptExecutor)TestUtility.driver).executeScript("arguments[0].setAttribute('style', arguments[1]);", uiElement, "");
			logInfo("Click on UI element " + uiElement.getText());
			waitForElementBeforeClick(uiElement).click();	
		} catch (Exception e) {
			logFail("Unable to click on " + uiElement.getText() + " : " + e.getMessage());
			e.printStackTrace();
		}
	}
	
	/**
	 * @param uiText
	 */
	public static void clickOnWebElement(String uiText) {
		try{
			logInfo("Click on UI element " + uiText);
			getWebElement(uiText).click();
		} catch (Exception e) {
			logFail("Unable to click on UI element " + uiText + " : " + e.getMessage());
			e.printStackTrace();
		}
	}

	/**
	 * @param uiElement
	 * @param waitTime
	 */
	public static void clickOnWebElement(WebElement uiElement, int waitTime) {
		try{
			logInfo("Click on UI element " + uiElement.getText());
			new WaitFunctions(TestUtility.driver).getWait(waitTime, 1).until(ExpectedConditions.elementToBeClickable(uiElement)).click();
		} catch (Exception e) {
			logFail("Unable to click on " + uiElement.getText() + " : " + e.getMessage());
			e.printStackTrace();
		}
	}

	public static void selectDropdownValue(String dropDownElementToBeSelected) {
		try{
			clickOnWebElement(dropDownElementToBeSelected);
		// waitForElementAndClick(By.xpath("//*[contains(text(),'" + dropDownElementToBeSelected + "')]"))).click();
			logInfo("Click on UI element " + dropDownElementToBeSelected);
		} catch (Exception e) {
			logFail("Unable to click on " + dropDownElementToBeSelected + " : " + e.getMessage());
		}
	}

	/**
	 * @param uiElement
	 * @param value
	 */
	public static void setValue(WebElement uiElement, String value) {
		try {
		//	uiElement.clear();
			getWebElement(uiElement).clear();
			uiElement.sendKeys(value);
			logInfo("Setting value for UI element " + uiElement.getAttribute("id"));
			uiElement.sendKeys(Keys.TAB);
		} catch (Exception e) {
			logFail("Unable to set value for UI element " + uiElement.getAttribute("id") + " : " + e.getMessage());
		}
	}

	/**
	 * @param uiElement
	 * @param value
	 */
	public static void setValue(WebElement uiElement, long value) {
		try {
			getWebElement(uiElement).clear();
			uiElement.sendKeys(String.valueOf(value));
			logInfo("Setting value for UI element " + uiElement.getAttribute("id"));
			uiElement.sendKeys(Keys.TAB);
		} catch (Exception e) {
			logFail("Unable to set value for UI element " + uiElement.getAttribute("id") + " : " + e.getMessage());
		}
	}

	/**
	 * @param uiTextboxName
	 * @param value
	 */
	public static void setValue(String uiTextboxId, String value) {
		try {
			WebElement element = waitForPresenceOfElement(By.id(uiTextboxId));
			element.clear();
			element.sendKeys(value);
			element.sendKeys(Keys.TAB);
			logInfo("Setting value for UI element " + uiTextboxId);
		} catch (Exception e) {
			logFail("Unable to set value for UI element " + uiTextboxId + " : " + e.getMessage());
		}
	}

	/**
	 * @return
	 */
	public static Set<String> getWindowHandles() {
		return TestUtility.driver.getWindowHandles();
	}

	/**
	 * @param index
	 */
	public static void switchToWindow(int index) {
		try {
			LinkedList<String> windowsId = new LinkedList<>(getWindowHandles());
			if (index < 0 || index > windowsId.size())
				throw new IllegalArgumentException("Invalid Index : " + index);
			TestUtility.driver.switchTo().window(windowsId.get(index));
			logInfo("Switching to window: " + index);
		} catch (Exception e) {
			logFail("Unable to switch to window: " + index + " , " + e.getMessage());
		}
	}

	/**
	 * 
	 */
	public static void switchToParentWindow() {
		try {
			TestUtility.driver.switchTo().defaultContent();
			/** same as the above code */
			/*
			 * LinkedList<String> windowsId = new LinkedList<String>(getWindowHandles());
			 * driver.switchTo().window(windowsId.get(0));
			 */
			logInfo("Switching to parent window");
		} catch (Exception e) {
			logFail("Unable to switch to parent window, " + e.getMessage());
		}
	}

	/**
	 * 
	 */
	public static void switchToParentAndCloseChildWindow() {
		LinkedList<String> windowsId = new LinkedList<>(getWindowHandles());
		for (int i = 1; i < windowsId.size(); i++) {
			try {
				TestUtility.driver.switchTo().window(windowsId.get(i));
				TestUtility.driver.close();
				switchToParentWindow();
				logInfo("Switching to parent window and close the child window");
			} catch (Exception e) {
				logFail("Unable to switch to parent window and close the child window, " + e.getMessage());
			}
		}
	}

	/**
	 * @param locator
	 */
	public static void switchToFrame(By locator) {
		try {
			TestUtility.driver.switchTo().frame(TestUtility.driver.findElement(locator));
			logInfo("Switching to frame: " + locator.toString());
		} catch (Exception e) {
			logFail("Unable to switch to frame: " + locator.toString() + " : " + e.getMessage());
			e.printStackTrace();
		}
	}

	/**
	 * @param locator
	 */
	public static void switchToFrame(WebElement locator) {
		try {
			TestUtility.driver.switchTo().frame(waitForElement(locator));
			logInfo("Switching to frame: " + locator.getText());
		} catch (Exception e) {
			logFail("Unable to switch to frame: " + locator.getText() + " : " + e.getMessage());
			e.printStackTrace();
		}
	}

	/**
	 * @param nameOrId
	 */
	public static void switchToFrame(String nameOrId) {
		try {
			TestUtility.driver.switchTo().frame(nameOrId);
			logInfo("Switching to frame: " + nameOrId);
		} catch (Exception e) {
			logFail("Unable to switch to frame: " + nameOrId + " : " + e.getMessage());
			e.printStackTrace();
		}
	}

	/**
	 * @param index
	 */
	public static void switchToFrame(int index) {
		try {
			TestUtility.driver.switchTo().frame(index);
			logInfo("Switching to frame index " + index);
		} catch (Exception e) {
			logFail("Unable to switch to frame index " + index + " : " + e.getMessage());
			e.printStackTrace();
		}
	}

	/**
	 * @param indexOfTab
	 */
	public static void switchToTab(int indexOfTab) {
		ArrayList<String> tabs = new ArrayList<>(TestUtility.driver.getWindowHandles());
		try {
			TestUtility.driver.switchTo().window(tabs.get(indexOfTab));
			logInfo("Switching to tab index " + indexOfTab);
		} catch (Exception e) {
			logFail("Unable to switch to tab index " + indexOfTab + " : " + e.getMessage());
			e.printStackTrace();		
		}
	}

	/**
	 * 
	 */
	public static void switchToDefaultContent() {
		try {
			TestUtility.driver.switchTo().defaultContent();
			logInfo("Switching to default/parent window");
		} catch (Exception e) {
			logFail("Unable to switch to default/parent window: " + e.getMessage());
			e.printStackTrace();			
		}
	}

	/**
	 * @param comment
	 */
	public static void logInfo(String comment) {
		log.info(comment);
		Reporter.log(comment);
		ExtentManager.test.createNode("Step details").log(Status.INFO, comment);
	}

	/**
	 * @param comment
	 */
	public static void logFail(String comment) {
		log.error(comment);
		stepLevelInfo.log(Status.ERROR, comment);
		stepLevelFail = ExtentManager.test.createNode("Step details").error(comment);
	}

	/**
	 * @param comment
	 */
	public static void logPass(String comment) {
		log.info(comment);
		stepLevelInfo.log(Status.PASS, comment);
		stepLevelPass = ExtentManager.test.createNode("Step details").pass(comment);
	}
	
}
