package name;

import java.time.Duration;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;
import java.util.TreeSet;
import org.apache.log4j.Logger;
import org.frb.stls.cars.common.utilities.LogFunction;
import org.frb.stls.cars.common.webdrivers.TestUtility;
import org.openqa.selenium.By;
import org.openqa.selenium.Keys;
import org.openqa.selenium.NoSuchElementException;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.firefox.FirefoxOptions;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.PageFactory;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.FluentWait;
import org.openqa.selenium.support.ui.Wait;

public class CalendarFunctions {

	private final static Logger log = LogFunction.getLogger(TableAndCalendarFunctions.class);
	private static WebDriver driver;
	private static Wait<WebDriver> wait;

	public static void initializeDriverAndWait(WebDriver driver) {
		myDriver = driver;
		wait = new FluentWait<>(myDriver).withTimeout(Duration.ofSeconds(10))
				.pollingEvery(Duration.ofSeconds(1)).ignoring(NoSuchElementException.class);
	}
	
	public static List<WebElement> listOfYears(){	
		return wait.until(ExpectedConditions.visibilityOfAllElementsLocatedBy(By.cssSelector("...")));
		}
	
	public static List<WebElement> disabledYears(){	
		return wait.until(ExpectedConditions.visibilityOfAllElementsLocatedBy(By.cssSelector(".....disabled")));
		}
	
	public static Set<String> allYearsOnCurrentCalenderPageToListOfStrings(){
		Set<String> allYears = new LinkedHashSet<>();
		 for (WebElement year : listOfYears()){ 
			allYears.add(year.getText());
		}
		return allYears;
		} 
	
	public static Set<String> checkIfEnteredYearIsDisabledOnTheCalendartYearList(){
		Set<String> allDisabledYears = new LinkedHashSet<>();
		 for (WebElement disabledYear : disabledYears()){ 
				allDisabledYears.add(disabledYear.getText());
			}
		return allDisabledYears;
	}
	
	public static void selectYear(String yearNumber){
		 for (WebElement calendarYear : listOfYears()){ 
			 if (calendarYear.getText().equals(yearNumber)) {
					 calendarYear.click();
					break;
			 	}
			}
		} 
	
	
	public static void clickOnCalendarBoxAndClickOnYear(WebElement calenderObject){
		wait.until(ExpectedConditions.elementToBeClickable(calenderObject)).click();
		wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector("...."))).click();
	}
	
	public static void setYear(WebElement calenderObject, int yearNumber) {
		 clickOnCalendarBoxAndClickOnYear(calenderObject);
		if (allYearsOnCurrentCalenderPageToListOfStrings().contains(String.valueOf(yearNumber))){	
			if(!checkIfEnteredYearIsDisabledOnTheCalendartYearList().contains(String.valueOf(yearNumber)))
				selectYear(String.valueOf(yearNumber));
			else
				log.info(yearNumber	+ " is not an active set year.");	
			}	
		else if(!allYearsOnCurrentCalenderPageToListOfStrings().contains(String.valueOf(yearNumber))) {	
			clickPrevious();
			if(allYearsOnCurrentCalenderPageToListOfStrings().contains(String.valueOf(yearNumber)) 
					&& !checkIfEnteredYearIsDisabledOnTheCalendartYearList().contains(String.valueOf(yearNumber))){
				selectYear(String.valueOf(yearNumber));
.				}
			else if(allYearsOnCurrentCalenderPageToListOfStrings().contains(String.valueOf(yearNumber)) 
					&& checkIfEnteredYearIsDisabledOnTheCalendartYearList().contains(String.valueOf(yearNumber))){
				log.info(yearNumber	+ " is not an active set year.");
				}
			else
				log.info(yearNumber +" is not within the year range in the calendar. Please, check the year range and enter appropriate year.");
			}
			
		else {
			log.info(yearNumber + " is not a valid year. Please, check the year entered for appropriate number of digits.");
		}
	}
	
	public static void setYear(WebElement calenderObject, String yearNumber) {
		 clickOnCalendarBoxAndClickOnYear(calenderObject);
		if (allYearsOnCurrentCalenderPageToListOfStrings().contains(yearNumber)){	
			if(!checkIfEnteredYearIsDisabledOnTheCalendartYearList().contains(yearNumber))
			selectYear(yearNumber);
			else
				log.info(yearNumber	+ " is not an active set year.");	
			}
		else if(!allYearsOnCurrentCalenderPageToListOfStrings().contains(yearNumber)) {	
			clickPrevious();
			if(allYearsOnCurrentCalenderPageToListOfStrings().contains(yearNumber) && !checkIfEnteredYearIsDisabledOnTheCalendartYearList().contains(yearNumber)){
				selectYear(yearNumber);
				}
			else if(allYearsOnCurrentCalenderPageToListOfStrings().contains(yearNumber) && checkIfEnteredYearIsDisabledOnTheCalendartYearList().contains(yearNumber)){
				log.info(yearNumber	+ " is not an active set year.");
				}
			else
				log.info(yearNumber +" is not within the year range in the calendar. Please, check the year range and enter appropriate year.");
			}
			
		else {
			log.info(yearNumber + " is not a valid year. Please, check the year entered for appropriate number of digits.");
		}
	}

	
	public static List<WebElement> listOfMonths(){	
		return wait.until(ExpectedConditions.visibilityOfAllElementsLocatedBy(By.cssSelector("...")));
		}
	
	public static List<WebElement> disabledMonths(){
		wait.until(ExpectedConditions.visibilityOfAllElementsLocatedBy(By.cssSelector("...")));
		return driver.findElements(By.cssSelector("... .disabled"));
		}
	
	public static Set<String> allMonthsOnCurrentCalenderYearAsListOfStrings(){
		Set<String> allMonths = new LinkedHashSet<>();
		 for (WebElement month : listOfMonths()){ 
			 allMonths.add(month.getText());
		}
		return allMonths;
		} 
	
	public static Set<String> allMonthsOnCurrentStatus(){
		Set<String> allMonths = new LinkedHashSet<>();
		 for (WebElement month : listOfMonths()){ 
			 allMonths.add(month.getAttribute("class"));
		}
		return allMonths;
		} 
	
	public static Set<String> checkIfEnteredMonthIsDisabledOnSelectedYear(){
		Set<String> allDisabledMonths = new LinkedHashSet<>();
		if(disabledMonths().isEmpty())	{	
			return allDisabledMonths;
			}
		else{
			for (WebElement disabledMonth : disabledMonths()){ 
				allDisabledMonths.add(disabledMonth.getText());
				}
		return allDisabledMonths;
	}
		
	}
	
	public static void selectMonth(String monthOnCalendar){
		 for (WebElement calendarMonth : listOfMonths()){ 
			 if(allMonthsOnCurrentCalenderYearAsListOfStrings().contains(monthOnCalendar)) //	&& !allMonthsOnCurrentStatus().contains("disabled"))
.				 {if (calendarMonth.getText().equals(monthOnCalendar)) {	  
					 calendarMonth.click();
					break;
				 	}
				}
			} 
		}
	
	public static void setMonthAfterYear(String monthOnCalendar) {
		if (!checkIfEnteredMonthIsDisabledOnSelectedYear().contains(monthOnCalendar)){	
.				selectMonth(monthOnCalendar);	
			}
		else if (checkIfEnteredMonthIsDisabledOnSelectedYear().contains(monthOnCalendar)){
				log.info(monthOnCalendar	+ " is not an active month for this calendar year:  Please, enter an active month");	
				}
		else {
			log.info(monthOnCalendar + " is not a valid month. Please, check the value entered for letter/spelling  mistake and try again with valid active day number.");
		}
	}

	
	public static void changeMonthForCurrentYearOnCalendar(WebElement calenderObject, String monthOnCalendar) {
		wait.until(ExpectedConditions.elementToBeClickable((calenderObject))).click();
		wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector("..."))).click();
		if (allMonthsOnCurrentCalenderYearAsListOfStrings().contains(monthOnCalendar)){	
			if(!checkIfEnteredMonthIsDisabledOnSelectedYear().contains(monthOnCalendar)){
				selectMonth(monthOnCalendar);	
				}
			else	{
				log.info(monthOnCalendar	+ " is not an active month for this calendar year:  Please, enter an active month");	
				}
			}
		else {
			log.info(monthOnCalendar + " is not a valid month. Please, check the month entered for spelling mistake and try again with valid active month.");
		}
	}

	
	public static List<WebElement> listOfDays(){	
		return wait.until(ExpectedConditions.visibilityOfAllElementsLocatedBy(By.cssSelector("...")));
		}
	
	public static List<WebElement> disabledDays(){
		wait.until(ExpectedConditions.visibilityOfAllElementsLocatedBy(By.cssSelector("...")));
		return driver.findElements(By.cssSelector("..."));
		}
	
	public static Set<String> allDaysOnCurrentCalenderMonthAsListOfStrings(){
		Set<String> allDays = new TreeSet<>();
		 for (WebElement day : listOfDays()){ 
			 allDays.add(day.getText());
		}
		return allDays;
		} 
	
	public static Set<String> checkIfEnteredDayIsDisabledOnSelectedMonth(){
		Set<String> allDisabledDays = new TreeSet<>();
		if(disabledDays().isEmpty()) {	
			return allDisabledDays;
		}
		else {
		 for (WebElement disabledDay : disabledDays()){ 
			 allDisabledDays.add(disabledDay.getText());
			}
		return allDisabledDays;
		}
	}
		
	public static void selectDay(String dayOnCalendar){
		 for (WebElement calendarDay : listOfDays()){ 
			 if (calendarDay.getText().trim().toString().equals(dayOnCalendar)) {	  
				 calendarDay.click();
					break;
			 	}
			}
		} 
	
	public static void setDay(String dayNumber) {
		if (allDaysOnCurrentCalenderMonthAsListOfStrings().contains(dayNumber)){	
			selectDay(dayNumber);
			}
		else if (checkIfEnteredDayIsDisabledOnSelectedMonth().contains(dayNumber)){
			log.info(dayNumber	+ " is either inactive or not in this month's calendar number range; please, enter appropriate valid number!");	
			}
		else {
			log.info(dayNumber + " is not a valid day. Please, check the day number entered and try again with valid active day number.");
		}
	}
	
	public static void setDay(int dayNumber) {
		if (allDaysOnCurrentCalenderMonthAsListOfStrings().contains(String.valueOf(dayNumber))){	
			selectDay(String.valueOf(dayNumber));
			}
		else if	(checkIfEnteredDayIsDisabledOnSelectedMonth().contains(String.valueOf(dayNumber))){
			log.info(dayNumber	+ " is either inactive or not in this month's calendar number range; please, enter appropriate valid number!");		
			}
		else {
			log.info(dayNumber + " is not a valid day. Please, check the day number entered and try again with valid active day number.");
		}
	}

	
	public static void setDate(WebElement calendarUiInputBox, String dateValue) {		WebElement calendarFiled = wait.until(ExpectedConditions.elementToBeClickable(calendarUiInputBox));
		calendarFiled.clear();
		calendarFiled.sendKeys(dateValue);
	}

	public static void setDate(String calendarUiInputBox, String dateValue) {
		WebElement element = wait.until(ExpectedConditions.presenceOfElementLocated(By.xpath("//input[@id='" + calendarUiInputBox + "']")));
		element.clear();
		element.sendKeys(dateValue);
	}

	public static void setDate(WebElement calendarElement, int year, String month, int day) {
		TableAndCalendarFunctions.setYear(calendarElement, year);
		TableAndCalendarFunctions.setMonthAfterYear(month);
		TableAndCalendarFunctions.setDay(day);
	}

	public static void setDate(String calendarId, String year, String month, String day) {
		WebElement calenderObject = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//input[@id='" + calendarId + "']")));
		TableAndCalendarFunctions.setYear(calenderObject, year);
		TableAndCalendarFunctions.setMonthAfterYear(month);
		TableAndCalendarFunctions.setDay(day);
	}

	public static WebElement clickNext() { // .bs-datepicker-container .bs-datepicker-head .next
		WebElement element = wait
				.until(ExpectedConditions.elementToBeClickable(By.cssSelector("...")));
		while (element.isEnabled()) {
			element.click();
			break;
		}
		return element;
	}

	public static WebElement clickPrevious() {
		WebElement element = wait
				.until(ExpectedConditions.elementToBeClickable(By.cssSelector("...")));
		while (element.isEnabled()) {
			element.click();
			break;
		}
		return element;
	}

}
