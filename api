
----------------- API test page (free API) ---------------------------
https://api.github.com/
https://jsonplaceholder.typicode.com/
https://reqres.in/



//To read test data from spreadsheet:
  @DataProvider(name = "providerName")
    public Object[][] MethodName() {
        return new SpreadSheetHandler(setWorkBook("WorkBookName"), "SheetName", false).getTestData();
    }
    
    //Variable declaration
    public FileInputStream file = null;
    public XSSFWorkbook workbook = null;
    public XSSFSheet sheet = null;
    protected String pathToWorkbookLocation = null;
    protected XSSFRow row = null;
    protected XSSFCell cell = null;
    protected Row rows = null;
    protected Cell cells = null;
    
    //Constructor
    SpreadSheetHandler(final String workBook, final String excelSheet, final boolean isSheetTypeIndex) {
        this.pathToWorkbookLocation = workBook;
        try {
            file = new FileInputStream(new File(workBook));
            workbook = new XSSFWorkbook(file);
            if (isSheetTypeIndex) {
                final int index = Integer.parseInt(excelSheet);
                sheet = workbook.getSheetAt(index);
            } else {
                sheet = workbook.getSheet(excelSheet);
            }
            file.close();
        } catch (final Exception e) {
            logger.error("Error Occured", e);
        }
    }
    
    //Data retrieval
     public Object[][] getTestData() {

        final int totalRow = sheet.getLastRowNum();
        final int totalColumn = sheet.getRow(0).getLastCellNum();
        final Object[][] dataSets = new Object[totalRow][1];
        HashMap<Object, Object> tableData = null;
        boolean rowIsNotEmpty = false;
        int nonEmptyRows = 0;

        for (int i = 0; i < totalRow; i++) {
            tableData = new HashMap<>();
          
            for (int j = 0; j < totalColumn; j++) {
                final XSSFRow currentRow = sheet.getRow(i + 1);
                XSSFCell xssfcell = null;
                if (currentRow != null) {
                    xssfcell = sheet.getRow(i + 1).getCell(j);
                    if (xssfcell != null && xssfcell.toString().trim().length() > 0) {
                        rowIsNotEmpty = true;
                        tableData.put(sheet.getRow(0).getCell(j).toString(), xssfcell.toString());
                    } else {
                        tableData.put(sheet.getRow(0).getCell(j).toString(), "");
                    }
                }
            }

            if (rowIsNotEmpty) {
                nonEmptyRows++;
                dataSets[i][0] = tableData;
            }
        }

        final Object[][] validDataSets = new Object[nonEmptyRows][1];
        if (nonEmptyRows > 0) {
            for (int r = 0; r < nonEmptyRows; r++) {
                validDataSets[r][0] = dataSets[r][0];
            }
        }
        return validDataSets;
    }


<!-- SDET Regular REST-Assured API video URL: https://www.youtube.com/playlist?list=PLUDwpEzHYYLuMRzT6LFq4r8DwKZdcqHmY -->
<!-- Bhanu Regular REST-Assured API video URL: https://www.youtube.com/playlist?list=PL5NG-eEzvTtiTfE8p2ZXfDkDKD2gSdx9e -->
	<!-- https://mvnrepository.com/artifact/io.rest-assured/rest-assured -->
	<dependency>
		<groupId>io.rest-assured</groupId>
		<artifactId>rest-assured</artifactId>
		<version>4.0.0</version>
		<scope>test</scope>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/org.apache.poi/poi -->
	<dependency>
		<groupId>org.apache.poi</groupId>
		<artifactId>poi</artifactId>
		<version>4.1.0</version>
	</dependency>

	<!-- https://mvnrepository.com/artifact/org.apache.poi/poi-ooxml -->
	<dependency>
		<groupId>org.apache.poi</groupId>
		<artifactId>poi-ooxml</artifactId>
		<version>4.1.0</version>
	</dependency>
	
	<!-- dependency for random string value and other apache common lang -->
	<dependency>
		  <groupId>org.apache.commons</groupId>
		  <artifactId>commons-lang3</artifactId>
		  <version>3.9</version>
	</dependency>

	<!-- https://mvnrepository.com/artifact/org.testng/testng -->
	<dependency>
		<groupId>org.testng</groupId>
		<artifactId>testng</artifactId>
		<version>6.14.3</version>
		<scope>test</scope>
	</dependency>

<!-- TO CONVERT JAVA OBJECT TO JSON FILE, WE USE: Jackson Core, Jackson DataBind and Jackson Annotation 
MAVEN DEPENDECY FOR ......  1-TO-1, and MANY-TO MANY arraylist Object CONVERSION -->
<!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind -->
	<dependency>
		<groupId>com.fasterxml.jackson.core</groupId>
		<artifactId>jackson-databind</artifactId>
		<version>2.9.9</version>
	</dependency>


	<!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-core -->
	<dependency>
		<groupId>com.fasterxml.jackson.core</groupId>
		<artifactId>jackson-core</artifactId>
		<version>2.9.9</version>
	</dependency>


	<!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-annotations -->
	<dependency>
		<groupId>com.fasterxml.jackson.core</groupId>
		<artifactId>jackson-annotations</artifactId>
		<version>2.9.9</version>
	</dependency>

<!-- TO CONVERT JAVA OBJECT TO JSON FILE, WE USE: gosn, and json-simple MAVEN DEPENDECY FOR ...... MANY-TO ONE arraylist Object CONVERSION -->
	<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
	<dependency>
	    <groupId>com.google.code.gson</groupId>
	    <artifactId>gson</artifactId>
	    <version>2.8.5</version>
	</dependency>

	<!-- https://mvnrepository.com/artifact/com.googlecode.json-simple/json-simple -->
	<dependency>
		<groupId>com.googlecode.json-simple</groupId>
		<artifactId>json-simple</artifactId>
		<version>1.1.1</version>
	</dependency>
	
	<!-- For BDD REST Assured API Testing -->
<!-- BDD Sample Video URL: https://www.youtube.com/playlist?list=PLUDwpEzHYYLskkglxoXd0L6DKu4uOfh-m -->
	<!-- https://mvnrepository.com/artifact/io.rest-assured/json-schema-validator -->
	<dependency>
	    <groupId>io.rest-assured</groupId>
	    <artifactId>json-schema-validator</artifactId>
	    <version>4.0.0</version>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/io.rest-assured/json-path -->
	<dependency>
	    <groupId>io.rest-assured</groupId>
	    <artifactId>json-path</artifactId>
	    <version>4.0.0</version>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/io.rest-assured/xml-path -->
	<dependency>
	    <groupId>io.rest-assured</groupId>
	    <artifactId>xml-path</artifactId>
	    <version>4.0.0</version>
	</dependency>

    
 <build>
	<plugins> <!-- These two plug-ins will help compile and run tests via pom.xml file. -->

		<plugin>
			<!-- https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-compiler-plugin -->
			<groupId>org.apache.maven.plugins</groupId>
			<artifactId>maven-compiler-plugin</artifactId>
			<configuration>
				<source>1.8</source>
				<target>1.8</target>
			</configuration>
		</plugin>


		<plugin>
			<!-- https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-surefire-plugin -->
			<groupId>org.apache.maven.plugins</groupId>
			<artifactId>maven-surefire-plugin</artifactId>
			<version>2.18.1</version>
			<configuration>
				<suiteXmlFiles>
					<suiteXmlFile>testng.xml</suiteXmlFile>
				</suiteXmlFiles>
			</configuration>
		</plugin>

	</plugins>
</build>

,!-- or this alternative -->
<build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.8.0</version>
                <configuration>
                    <verbose>true</verbose>
                    <fork>true</fork>
                    <source>${java.version}</source>
                    <target>${java.version}</target>
                </configuration>
            </plugin>
            <plugin>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>2.22.0</version>
                 <configuration>
		    <suiteXmlFiles>
			<suiteXmlFile>testng.xml</suiteXmlFile>
		   </suiteXmlFiles>
                   <!--skipTests>true</skipTests-->
                </configuration>
            </plugin>
            <plugin>
                <artifactId>maven-failsafe-plugin</artifactId>
                <version>2.22.0</version>
            </plugin>
        </plugins>
    </build>
   
  ===================================================================================
  
  # To run test via command line:
  1) Download and install maven on the system where test will be ran: https://maven.apache.org/download.cgi
  2) Set maven path in the system environment variable: maven bin file extracted path (in the maven folder)  
  3) Verify maven is installed successfully: mvn -version
  4) mvn clean test (This will run the test from the command line)
  
  ===================================================================================
  
  # To run test via .bat file
  1) Create a test file with a name and save it with .bat extension
  2) Enter these two commands/instructions in the .bat file and save:
        cd path to the project
	mvn clean install
 3) Double click on the .bat file to run the tests in the project specified in the .bat file.
 4) Go to the log file to read the test result in case the comman line window closed due to failed test.
 
 =======================================================================================
 
 # To run test (job) via Jenkins or Bamboo
 1) Download jenkins war file (https://jenkins.io/download/)
 2) Keep the war file in a directory
 3) Open the command promp and change to the war file location
 4) run the command code (java -jar jenkins.war) and do not close the window open
 5) Open your web browser and enter the localjenkins URL (localhost:8080)
 6) Log in (if user already exist) or create a new user credential and log in
 7) Create new item (project name --> Select Freestyle project --> OK button --> 
 	go to "Build" session and select "Execute window batch command")
 8) Enter "cd project directory" and "batfileName.bat" in the input box -- click "Apply" --> "Save" button
 9) Click on "Build Now" logo or right click on the project and select build now.
 
 ======================================================================================
 C:\...\.m2\repository\commons-lang\commons-lang\
 
  private static ArrayList<String> listOfDomain() {
        final ArrayList<String> domain = new ArrayList<String>();
        domain.add("@yahoo.com");
        domain.add("@mail.com");
        domain.add("@msn.net");
        domain.add("@fakeit.org");
        domain.add("@restassure.io");
        domain.add("@testng.org");
        return domain;
    }

    @Test
    private static void randomlyPickDomain() {
        final int arraySize = listOfDomain().size();

        final List<String> domainList = Arrays.asList("kaka.ng", "bola.uk", "baba.com", "ojo.org", "united.net");

        final String random1 = listOfDomain().get(new Random().nextInt(arraySize));
        final String random2 = listOfDomain().get(new Random().nextInt(arraySize));
        final String random3 = listOfDomain().get(new Random().nextInt(arraySize));

        final String pick1 = domainList.get(new Random().nextInt(domainList.size()));
        final String pick2 = domainList.get(new Random().nextInt(domainList.size()));
        final String pick3 = domainList.get(new Random().nextInt(domainList.size()));

        LOGGER.info("Selected domain1 is: " + random1);
        LOGGER.info("Selected domain2 is: " + random2);
        LOGGER.info("Selected domain3 is: " + random3);

        LOGGER.info("--------------------------------------------");
        LOGGER.info("Selected Picked Value 1 is: " + pick1);
        LOGGER.info("Selected Picked Value 2 is: " + pick2);
        LOGGER.info("Selected Picked Value 3 is: " + pick3);
    }

 
