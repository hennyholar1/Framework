// For Table cell locator using table label ID
private WebElement editableTableCell(final String tableId, final String columnName, final int rowNumber) {
	return driver.findElement(By.cssSelector("#" + tableId + " tbody tr:nth-child(" + rowNumber + ") td:nth-child("
			+ getColumnIndex(columnName) + ") input")); //it could have th , so check for it.
	}
	
	private int getColumnIndex(final String columnName) {
		int index = 0;
		for (WebElement colNum : driver.findElements(By.cssSelector("thead th"))) {
			index = index + 1;
			if (colNum.getText().equalsIgnoreCase(columnName)) {
				return index;
			}
		}
		return -10;
	}
    
    //Enum returning String
public enum ENUMname{

    VALUE1 {
        @Override
        public String toString() {
            return EXPECTED_VALUE1;
        }
    },
     VALUE2 {
        @Override
        public String toString() {
            return EXPECTED_VALUE2;
        }
    }
}

 public JavaScriptFunctions waitForPageToReady() {
        for (int i = 0; i < 25; i++) {
            if (getJsExecutor().executeScript("return document.readyState").toString().equals("complete")) {
                return this;
            }
        }
        return this;
    }

//LambDa Expression for String to Object
private static BigDecimal convertStringToBigDecimal(final String strValue) {
        if (!Utility.isNullOrWhitespaces(strValue)) {
            final String tmp = strValue.replaceAll("[^0-9.]", "");
            return new BigDecimal(tmp);
        }
        return null;
    }
    
 //Ternary with StringBuilder   
public String cellRowData(final String tableDomId, final int rowNumber) {
	return new StringBuilder()
			.append(getCellData(tableDomId, columnName, rowNumber).equals("") ? "-- "
				: getTasCellData(tableDomId, columnName, rowNumber) + " ").toString();
}

public String getCellData((final String tableId, final String columnName, final int rowNumber) {
		return (!nonEditableTasCell(tableId, columnName, rowNumber).getAttribute("class").contains("input"))
				? nonEditableTasCell(tableId, columnName, rowNumber).getText() 
						: editableTasCell(tableId, columnName, rowNumber).getAttribute("value");
	}


public String getSumOfAmountValueEntered(List<String> amountColumn) {
	if (amountColumn.isEmpty()) {
		return BigDecimal.ZERO.toString();
	} else {
		BigDecimal totalAmount = BigDecimal.ZERO;
		for (final String amount : amountColumn) {
			if(!Utility.isNullOrWhitespaces(amount)){
				totalAmount =totalAmount.add(new BigDecimal(amount.replace("$", "").replaceAll(",", "")));
			}
		}
	return NumberFormat.getCurrencyInstance(getLocaleFromCurrency("USD")).format(totalAmount.floatValue());
	}
 }
 
 private static Locale getLocaleFromCurrency(String strCode) {
    for (final Locale locale : NumberFormat.getAvailableLocales()) {
	final String code = NumberFormat.getCurrencyInstance(locale).getCurrency().getCurrencyCode();
	if (strCode.equals(code)) {
	    return locale;
	}
    }  
    return null;
}
	
public List<String> getTableColumnData(final String tableHtmlId, final String columnName) {

final List<String> editable = new ArrayList<>();
		final List<String> nonEditable = new ArrayList<>();

		List<WebElement> columns = driver.findElements(
				By.cssSelector("#" + tableHtmlId + " tbody td:nth-child(" + getColumnIndex(columnName) + ") input"));

		if (!columns.isEmpty()) {
			columns.forEach(cell -> editable.add(cell.getAttribute("value")));
		} else {
			driver.findElements(
					By.cssSelector("#" + tableHtmlId + " tbody td:nth-child(" + getColumnIndex(columnName) + ")"))
					.forEach(cell -> {
						if (cell.getText().equals("")) {
							nonEditable.add("''");
						} else {
							nonEditable.add(cell.getText());
						}
					});
		}

		return CollectionUtils.isEmpty(nonEditable) ? editable : nonEditable;
}

public class Listeners extends TestListenerAdapter {

	public ExtentHtmlReporter htmlReporter;
	public ExtentReports extent;
	public ExtentTest test;
//	public ITestResult result;

	/*
	 * @AfterMethod() public void captureStatus(ITestResult result) { if
	 * (ITestResult.SUCCESS == result.getStatus()) { test.pass(result.getName() +
	 * " Passed"); test.log(Status.PASS, result.getName() + " test passed"); }
	 * 
	 * else if (ITestResult.STARTED == result.getStatus()) { test.log(Status.INFO,
	 * result.getName() + " test started"); }
	 * 
	 * else if (ITestResult.SKIP == result.getStatus()) { test.log(Status.SKIP,
	 * result.getName() + " test is skipped and the reason is:- " +
	 * result.getThrowable()); }
	 * 
	 * else if (ITestResult.FAILURE == result.getStatus()) { test.log(Status.ERROR,
	 * result.getName() + " test failed! And the reason is: " +
	 * result.getThrowable()); } }
	 */

	/**
	 * @param method
	 */
	public  void getTestMethodsInformation(Method method) {
		test = extent.createTest(method.getName(), "is being executed").assignAuthor("Oludare M Eniola").createNode(method.getName() + " Test Result Status");
	//	test = extent.createTest(method.getName(), "is being executed").createNode(method.getName() + " Test Result Status");
}
	
	public void onStart(ITestContext testContext) {
		htmlReporter = new ExtentHtmlReporter(System.getProperty("user.dir") + "/Reports/myReport.html");
		// htmlReporter.loadXMLConfig(new File(useFileData("extent_config_xml")));
		htmlReporter.config().setDocumentTitle("Test Execution - ExtentReports");
		htmlReporter.config().setReportName("API RestAssured Automation Test Report");
		htmlReporter.config().setTheme(Theme.DARK); // Theme background - dark, standard
		htmlReporter.config().setTimeStampFormat("mm/dd/yyyy hh:mm:ss a"); // set timeStamp format
		htmlReporter.loadXMLConfig("C:\\Users\\Da Novenos\\eclipse-workspace\\RestAssuredAPITestingFramework\\src\\main\\java\\com\\apitest\\utility\\extent-config.xml");
		// htmlReporter.config().setTestViewChartLocation(ChartLocation.TOP); // BOTTOM

		// Additional information that makes our report looks nice
		 if (extent == null) {
		extent = new ExtentReports();
		 }
		extent.setSystemInfo("Host Name", "Novenos IT Solutions Inc.");
		extent.setSystemInfo("Project Name", "Employee Database API project");
		extent.setSystemInfo("Environment", "QA/Automation Testing");
		extent.setSystemInfo("Version", "V-1.0.0");
		extent.setSystemInfo("OS", "Windows-10");
		extent.attachReporter(htmlReporter);
	}

	public void onTestSuccess(ITestResult result) {
		test = extent.createTest(result.getName());
		test.log(Status.PASS, result.getName() + " test passed");
	}

	public void onTestFailure(ITestResult result) {
		test = extent.createTest(result.getName());
		test.log(Status.FAIL, result.getName() + " test failed! ---> " + result.getThrowable());
	}

	public void onTestSkip(ITestResult result) {
		test = extent.createTest(result.getName());
		test.log(Status.SKIP, result.getName() + " was skipped.");
	}

	public void onFinish() {
		extent.flush();
	}

}

    
    
    BrowserType getBrowserEnum(final String browser) { // BrowserType is an enum
        final String msg = "Get browser enum for: {}";
        logger.trace("Get browser enum for: {}", msg);
        switch (browser.toUpperCase()) {
            case "CHROME":
                logger.trace(msg, BrowserType.CHROME);
                return BrowserType.CHROME;
            case "EDGE":
                logger.trace(msg, BrowserType.EDGE);
                return BrowserType.EDGE;
            case "FIREFOX":
                logger.trace(msg, BrowserType.FIREFOX);
                return BrowserType.FIREFOX;
            case "IE":
                logger.trace(msg, BrowserType.IE);
                return BrowserType.IE;
            case "CHROME_HEADLESS":
                logger.trace(msg, BrowserType.CHROME_HEADLESS);
                return BrowserType.CHROME_HEADLESS;
            case "FIREFOX_HEADLESS":
                logger.trace(msg, BrowserType.FIREFOX_HEADLESS);
                return BrowserType.FIREFOX_HEADLESS;
            default:
                logger.trace(msg, BrowserType.IE);
                return BrowserType.IE;
        }
    }
    
    String propertiesFileData(final String configFileData) {
        return FrameworkConfig.properties.getProperty(configFileData);
    }
    
    //Data provider
    protected String setWorkBook(final String workName) {
        final StringBuilder sb = new StringBuilder();
        // sb.append(System.getProperty("user.dir")).append(FrameworkConfig.propertiesFileData(TESTDATAPATH))
        sb.append(FrameworkConfig.propertiesFileData(TESTDATAPATH)).append(workName);
        return sb.toString();
    }
    
    @DataProvider(name = "providerName")
    public Object[][] MethodName() {
        return new SpreadSheetHandler(setWorkBook("WorkBookName"), "SheetName", false).getTestData();
    }
    
    //Variable declaration
    public FileInputStream file = null;
    public XSSFWorkbook workbook = null;
    public XSSFSheet sheet = null;
    protected String pathToWorkbookLocation = null;
    protected XSSFRow row = null;
    protected XSSFCell cell = null;
    protected Row rows = null;
    protected Cell cells = null;
    
    //Constructor
    SpreadSheetHandler(final String workBook, final String excelSheet, final boolean isSheetTypeIndex) {
        this.pathToWorkbookLocation = workBook;
        try {
            file = new FileInputStream(new File(workBook));
            workbook = new XSSFWorkbook(file);
            if (isSheetTypeIndex) {
                final int index = Integer.parseInt(excelSheet);
                sheet = workbook.getSheetAt(index);
            } else {
                sheet = workbook.getSheet(excelSheet);
            }
            file.close();
        } catch (final Exception e) {
            logger.error("Error Occured", e);
        }
    }
    
    //Data retrieval
     public Object[][] getTestData() {

        final int totalRow = sheet.getLastRowNum();
        final int totalColumn = sheet.getRow(0).getLastCellNum();
        final Object[][] dataSets = new Object[totalRow][1];
        HashMap<Object, Object> tableData = null;
        boolean rowIsNotEmpty = false;
        int nonEmptyRows = 0;

        for (int i = 0; i < totalRow; i++) {
            tableData = new HashMap<>();
          
            for (int j = 0; j < totalColumn; j++) {
                final XSSFRow currentRow = sheet.getRow(i + 1);
                XSSFCell xssfcell = null;
                if (currentRow != null) {
                    xssfcell = sheet.getRow(i + 1).getCell(j);
                    if (xssfcell != null && xssfcell.toString().trim().length() > 0) {
                        rowIsNotEmpty = true;
                        tableData.put(sheet.getRow(0).getCell(j).toString(), xssfcell.toString());
                    } else {
                        tableData.put(sheet.getRow(0).getCell(j).toString(), "");
                    }
                }
            }

            if (rowIsNotEmpty) {
                nonEmptyRows++;
                dataSets[i][0] = tableData;
            }
        }

        final Object[][] validDataSets = new Object[nonEmptyRows][1];
        if (nonEmptyRows > 0) {
            for (int r = 0; r < nonEmptyRows; r++) {
                validDataSets[r][0] = dataSets[r][0];
            }
        }
        return validDataSets;
    }
    
  //Regulare expression for number validation
  Integer checkIfNumeric(final String strData) {
        if (strData.matches("[0-9]+")) {
            return Integer.parseInt(strData);
        }
        return null;
    }
    
    
    /**  Initializing and insert config.properties file with its value(s) at run time. */
	public static String propertiesFileData(String configFileData) {
	return ConfigurationDataSource.getProperties().getProperty(configFileData);
	}
    
    //String to array conversion
    List<String> stringToArray(final String stringValue) {
        return new ArrayList<>(Arrays.asList((stringValue.equals("") ? "''" : stringValue).split(",")));
    }
    
    //Lambda expression (loop)
    arrayData.stream().filter(element -> element.getText().equals(value)).findFirst().get(); (search an array and pick first match)
    arrayData.stream().anyMatch(element -> (element.substring(0).contains("character")) (search an array list and pick any match)
    arrayData.forEach(variable -> verifyVariablePresence(arrayData)); (loop through an array list one by one to the end)
    
    =============================================================================================================================
// https://github.com/dequelabs/axe-selenium-java/blob/develop/src/test/java/com/deque/axe/ExampleTest.java    
import com.deque.axe.AXE;
import io.github.bonigarcia.wdm.DriverManagerType;
import io.github.bonigarcia.wdm.WebDriverManager;
import lombok.extern.slf4j.Slf4j;
import enums.userRole;
import interfaces.interfaceName;
import package.class1;
import org.json.JSONArray;
import org.json.JSONObject;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.firefox.FirefoxDriverLogLevel;
import org.openqa.selenium.firefox.FirefoxOptions;
import org.testng.annotations.*;
import java.net.URL;

import static enumsPackage.EnumName.EnumMethodOrVariable;
import static org.testng.AssertJUnit.assertTrue;

@Slf4j
public class axe508cTests {
    private static final String FIREFOX_PATH = "pathToFirefox .exe file\\firefox.exe";
    private static WebDriver driver;
    private Test test;

    private static final URL scriptUrl = ClassNameStartingWithPackageFullPath.class.getResource("/axe.min.js");

    @BeforeTest
    static void setupAll() {
        final FirefoxOptions options = new FirefoxOptions();
        options.setBinary(FIREFOX_PATH);
        options.setAcceptInsecureCerts(true);
        options.setLogLevel(FirefoxDriverLogLevel.INFO);
        WebDriverManager.getInstance(DriverManagerType.FIREFOX)
                .browserPath(FIREFOX_PATH)
                .version("0.24.0")
                .proxy("h1proxy.frb.org:8080")
                .setup();
        driver = new FirefoxDriver(options);
    }

    @BeforeMethod
    void setUpEach() {
        driver.get("url");
        driver.manage().window().fullScreen();//.maximize();
        atmPo = new AtmPOv2(driver, userRole);
    }

    @Test
    void homePage508c() {
        JSONObject responseJSON = new AXE.Builder(driver, scriptUrl).analyze();
        JSONArray violations = responseJSON.getJSONArray("violations");

        if (violations.length() == 0) {
            assertTrue("No violations found", true);
        } else {
            AXE.writeResults("tryAxeCore", responseJSON);
            assertTrue(AXE.report(violations), false);
        }
    }

    @Test
    void createPage508c() {
        test.methodName(Class page title);
        JSONObject responseJSON = new AXE.Builder(driver, scriptUrl).analyze();
        JSONArray violations = responseJSON.getJSONArray("violations");
        if (violations.length() == 0) {
            assertTrue("No violations found", true);
        } else {
            AXE.writeResults("tryAxeCore", responseJSON);
            assertTrue(AXE.report(violations), false);
        }
    }

    @Test
    void ConfirmationPage508c() {
        driver.get("entered data detail page url/view;id= uniqueID");
        try {
            Thread.sleep(3000);
        } catch (InterruptedException ie) {

        }
        JSONObject responseJSON = new AXE.Builder(driver, scriptUrl).analyze();
        JSONArray violations = responseJSON.getJSONArray("violations");
        if (violations.length() == 0) {
            assertTrue("No violations found", true);
        } else {
            AXE.writeResults("tryAxeCore", responseJSON);
            assertTrue(AXE.report(violations), false);
        }
    }

    @AfterMethod
    void tearDownEach() {
        testBase.logOff();
    }

    @AfterTest
    void tearDownAll() {
        driver.quit();
    }
}

========================================================================================
    
    //Extent Report
<?xml version="1.0" encoding="UTF-8"?>
<extentreports>
    <configuration>
        <!-- report theme -->
        <!-- standard, dark -->
        <theme>standard</theme>
    
        <!-- document encoding -->
        <!-- defaults to UTF-8 -->
        <encoding>UTF-8</encoding>
        
        <!-- protocol for script and stylesheets -->
        <!-- defaults to https -->
        <protocol>https</protocol>
        
        <!-- title of the document -->
        <documentTitle>Extent</documentTitle>
        
        <!-- report name - displayed at top-nav -->
        <reportName>Automation Report By CARS Automation Team</reportName>
        
        <!-- location of charts in the test view -->
        <!-- top, bottom -->
        <testViewChartLocation>bottom</testViewChartLocation>
		
        <!-- custom javascript -->
        <scripts>
            <![CDATA[
                $(document).ready(function() {
                    
                });
            ]]>
        </scripts>
        
        <!-- custom styles -->
        <styles>
            <![CDATA[
                
            ]]>
        </styles>
    </configuration>
</extentreports>


# fileName.properties
key : value
key = value # another alternative


<!-- logback.xml comment -->
<configuration>
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n</pattern>
        </encoder>
    </appender>
    
       <appender name="ROLLING" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>test-output/logs/test.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- rollover monthly -->
            <fileNamePattern>system-%d{yyyy-MM}.log.zip</fileNamePattern>
            <maxHistory>12</maxHistory>
            <totalSizeCap>3GB</totalSizeCap>
        </rollingPolicy>
        <encoder>
            <pattern>%-26(%d [%-5level]) %logger{35} - %msg%n</pattern>
        </encoder>
    </appender>
    
    <root level="info">
        <appender-ref ref="ROLLING" />
    </root>
     <root level="info">
        <appender-ref ref="STDOUT" />
    </root>
----------------------------------------------------------------------------------------

<!-- Log Back  dependency -->
 <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
            <version>${logback.version}</version>
        </dependency>

  <!--  configure slf4j binding -->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <version>${slf4j.version}</version>
        </dependency>

<!--  Driver manager -->
	<dependency>
            <groupId>io.github.bonigarcia</groupId>
            <artifactId>webdrivermanager</artifactId>
            <version>3.4.0</version>
            <scope>test</scope>
        </dependency>

<!-- 508 compliance -->
	<dependency>
            <groupId>com.deque</groupId>
            <artifactId>axe-selenium</artifactId>
            <version>3.0</version>
            <scope>test</scope>
        </dependency>
----------------------------------------------------------------------------------------

<!-- SDET Regular REST-Assured API video URL: https://www.youtube.com/playlist?list=PLUDwpEzHYYLuMRzT6LFq4r8DwKZdcqHmY -->
<!-- Bhanu Regular REST-Assured API video URL: https://www.youtube.com/playlist?list=PL5NG-eEzvTtiTfE8p2ZXfDkDKD2gSdx9e -->
	<!-- https://mvnrepository.com/artifact/io.rest-assured/rest-assured -->
	<dependency>
		<groupId>io.rest-assured</groupId>
		<artifactId>rest-assured</artifactId>
		<version>4.0.0</version>
		<scope>test</scope>
	</dependency>
	
	
	<!-- dependency for random string value and other apache common lang -->
	<dependency>
		  <groupId>org.apache.commons</groupId>
		  <artifactId>commons-lang3</artifactId>
		  <version>3.9</version>
	</dependency>


	<!-- https://mvnrepository.com/artifact/org.testng/testng -->
	<dependency>
		<groupId>org.testng</groupId>
		<artifactId>testng</artifactId>
		<version>6.14.3</version>
		<scope>test</scope>
	</dependency>


	<!-- https://mvnrepository.com/artifact/com.googlecode.json-simple/json-simple -->
	<dependency>
		<groupId>com.googlecode.json-simple</groupId>
		<artifactId>json-simple</artifactId>
		<version>1.1.1</version>
	</dependency>


	<!-- https://mvnrepository.com/artifact/org.apache.poi/poi -->
	<dependency>
		<groupId>org.apache.poi</groupId>
		<artifactId>poi</artifactId>
		<version>4.1.0</version>
	</dependency>


	<!-- https://mvnrepository.com/artifact/org.apache.poi/poi-ooxml -->
	<dependency>
		<groupId>org.apache.poi</groupId>
		<artifactId>poi-ooxml</artifactId>
		<version>4.1.0</version>
	</dependency>


	<!-- https://mvnrepository.com/artifact/com.aventstack/extentreports -->
	<dependency>
		<groupId>com.aventstack</groupId>
		<artifactId>extentreports</artifactId>
		<version>4.0.9</version>
	</dependency>
	
	<!-- For BDD REST Assured API Testing -->
<!-- BDD Sample Video URL: https://www.youtube.com/playlist?list=PLUDwpEzHYYLskkglxoXd0L6DKu4uOfh-m -->
	<!-- https://mvnrepository.com/artifact/io.rest-assured/json-schema-validator -->
	<dependency>
	    <groupId>io.rest-assured</groupId>
	    <artifactId>json-schema-validator</artifactId>
	    <version>4.0.0</version>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/io.rest-assured/json-path -->
	<dependency>
	    <groupId>io.rest-assured</groupId>
	    <artifactId>json-path</artifactId>
	    <version>4.0.0</version>
	</dependency>
	
	<!-- https://mvnrepository.com/artifact/io.rest-assured/xml-path -->
	<dependency>
	    <groupId>io.rest-assured</groupId>
	    <artifactId>xml-path</artifactId>
	    <version>4.0.0</version>
	</dependency>

    
 <build>
	<plugins> <!-- These two plug-ins will help compile and run tests via pom.xml file. -->

		<plugin>
			<!-- https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-compiler-plugin -->
			<groupId>org.apache.maven.plugins</groupId>
			<artifactId>maven-compiler-plugin</artifactId>
			<configuration>
				<source>1.8</source>
				<target>1.8</target>
			</configuration>
		</plugin>


		<plugin>
			<!-- https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-surefire-plugin -->
			<groupId>org.apache.maven.plugins</groupId>
			<artifactId>maven-surefire-plugin</artifactId>
			<version>2.18.1</version>
			<configuration>
				<suiteXmlFiles>
					<suiteXmlFile>testng.xml</suiteXmlFile>
				</suiteXmlFiles>
			</configuration>
		</plugin>

	</plugins>
</build>

,!-- or this alternative -->
<build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.8.0</version>
                <configuration>
                    <verbose>true</verbose>
                    <fork>true</fork>
                    <source>${java.version}</source>
                    <target>${java.version}</target>
                </configuration>
            </plugin>
            <plugin>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>2.22.0</version>
                 <configuration>
		    <suiteXmlFiles>
			<suiteXmlFile>testng.xml</suiteXmlFile>
		   </suiteXmlFiles>
                   <!--skipTests>true</skipTests-->
                </configuration>
            </plugin>
            <plugin>
                <artifactId>maven-failsafe-plugin</artifactId>
                <version>2.22.0</version>
            </plugin>
        </plugins>
    </build>
   
  ===================================================================================
  
  # To run test via command line:
  1) Download and install maven on the system where test will be ran: https://maven.apache.org/download.cgi
  2) Set maven path in the system environment variable: maven bin file extracted path (in the maven folder)  
  3) Verify maven is installed successfully: mvn -version
  4) mvn clean test (This will run the test from the command line)
  
  ===================================================================================
  
  # To run test via .bat file
  1) Create a test file with a name and save it with .bat extension
  2) Enter these two commands/instructions in the .bat file and save:
        cd path to the project
	mvn clean install
 3) Double click on the .bat file to run the tests in the project specified in the .bat file.
 4) Go to the log file to read the test result in case the comman line window closed due to failed test.
 
 =======================================================================================
 
 # To run test (job) via Jenkins or Bamboo
 1) Download jenkins war file (https://jenkins.io/download/)
 2) Keep the war file in a directory
 3) Open the command promp and change to the war file location
 4) run the command code (java -jar jenkins.war) and do not close the window open
 5) Open your web browser and enter the localjenkins URL (localhost:8080)
 6) Log in (if user already exist) or create a new user credential and log in
 7) Create new item (project name --> Select Freestyle project --> OK button --> 
 	go to "Build" session and select "Execute window batch command")
 8) Enter "cd project directory" and "batfileName.bat" in the input box -- click "Apply" --> "Save" button
 9) Click on "Build Now" logo or right click on the project and select build now.
 
 ======================================================================================
 C:\...\.m2\repository\commons-lang\commons-lang\
 
  private static ArrayList<String> listOfDomain() {
        final ArrayList<String> domain = new ArrayList<String>();
        domain.add("@yahoo.com");
        domain.add("@mail.com");
        domain.add("@msn.net");
        domain.add("@fakeit.org");
        domain.add("@restassure.io");
        domain.add("@testng.org");
        return domain;
    }

    @Test
    private static void randomlyPickDomain() {
        final int arraySize = listOfDomain().size();

        final List<String> domainList = Arrays.asList("kaka.ng", "bola.uk", "baba.com", "ojo.org", "united.net");

        final String random1 = listOfDomain().get(new Random().nextInt(arraySize));
        final String random2 = listOfDomain().get(new Random().nextInt(arraySize));
        final String random3 = listOfDomain().get(new Random().nextInt(arraySize));

        final String pick1 = domainList.get(new Random().nextInt(domainList.size()));
        final String pick2 = domainList.get(new Random().nextInt(domainList.size()));
        final String pick3 = domainList.get(new Random().nextInt(domainList.size()));

        LOGGER.info("Selected domain1 is: " + random1);
        LOGGER.info("Selected domain2 is: " + random2);
        LOGGER.info("Selected domain3 is: " + random3);

        LOGGER.info("--------------------------------------------");
        LOGGER.info("Selected Picked Value 1 is: " + pick1);
        LOGGER.info("Selected Picked Value 2 is: " + pick2);
        LOGGER.info("Selected Picked Value 3 is: " + pick3);

    }

 
